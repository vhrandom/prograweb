{"file_contents":{"AppleAura/credentials.md":{"content":"\n# üîê Credenciales de Usuarios de Prueba - AppleAura\n\n## üë§ Usuarios Creados\n\n### üõí **Comprador**\n- **Email:** `comprador@appleaura.com`\n- **Contrase√±a:** `Buyer2024!`\n- **Rol:** Buyer (Comprador)\n- **Nombre:** Mar√≠a Gonz√°lez\n\n### üè™ **Vendedor**\n- **Email:** `vendedor@appleaura.com`\n- **Contrase√±a:** `Seller2024!`\n- **Rol:** Seller (Vendedor)\n- **Nombre:** Carlos Mendoza\n- **Tienda:** TechStore Chile\n\n### üëë **Administrador**\n- **Email:** `admin@appleaura.com`\n- **Contrase√±a:** `Admin2024!`\n- **Rol:** Admin (Administrador)\n- **Nombre:** Ana Rodr√≠guez\n\n## üöÄ Instrucciones de Uso\n\n1. **Iniciar la aplicaci√≥n:** Ejecuta `npm run dev` en el directorio `AppleAura`\n2. **Poblar la base de datos:** Ejecuta `npm run db:seed` para crear usuarios y productos de prueba\n3. **Acceder a la aplicaci√≥n:** Ve a la p√°gina de login y usa cualquiera de las credenciales arriba\n4. **Probar funcionalidades:**\n   - Como **comprador**: navega productos, a√±ade al carrito, realiza compras\n   - Como **vendedor**: accede al dashboard de vendedor, gestiona productos\n   - Como **administrador**: accede al panel de administraci√≥n, gestiona usuarios y tienda\n\n## üìù Notas\n- Todas las contrase√±as siguen un patr√≥n seguro con may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos\n- Los usuarios se crean autom√°ticamente al ejecutar el seed de la base de datos\n- El vendedor tiene un perfil de tienda ya configurado llamado \"TechStore Chile\"\n","size_bytes":1445},"AppleAura/drizzle.config.ts":{"content":"\nimport { defineConfig } from \"drizzle-kit\";\n\nconst databaseUrl = process.env.DATABASE_URL || \"file:./database.sqlite\";\n\nif (!process.env.DATABASE_URL) {\n  console.warn(\"‚ö†Ô∏è  DATABASE_URL no est√° configurada. Usando SQLite por defecto.\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"sqlite\",\n  dbCredentials: {\n    url: databaseUrl,\n  },\n});\n","size_bytes":402},"AppleAura/init-setup.js":{"content":"\n#!/usr/bin/env node\n\nconst { execSync } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\nconsole.log('üöÄ Iniciando configuraci√≥n autom√°tica de AppleAura...\\n');\n\ntry {\n  // 1. Verificar que estamos en el directorio correcto\n  if (!fs.existsSync('./package.json')) {\n    console.error('‚ùå Error: Ejecuta este script desde el directorio AppleAura');\n    process.exit(1);\n  }\n\n  // 2. Crear directorios necesarios\n  console.log('üìÅ Creando directorios necesarios...');\n  const dirs = ['./data', './public/images/products', './migrations'];\n  dirs.forEach(dir => {\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n      console.log(`‚úÖ Creado: ${dir}`);\n    }\n  });\n\n  // 3. Generar im√°genes SVG\n  console.log('\\nüé® Generando im√°genes de productos...');\n  try {\n    execSync('cd public/images/products && node create-images.js', { stdio: 'inherit' });\n  } catch (error) {\n    console.log('‚ö†Ô∏è Advertencia: No se pudieron generar las im√°genes');\n  }\n\n  // 4. Inicializar base de datos\n  console.log('\\nüóÑÔ∏è Configurando base de datos...');\n  if (fs.existsSync('./database.sqlite')) {\n    fs.unlinkSync('./database.sqlite');\n    console.log('üóëÔ∏è Base de datos anterior eliminada');\n  }\n\n  // 5. Poblar base de datos\n  console.log('\\nüå± Poblando base de datos con datos de ejemplo...');\n  execSync('npm run db:seed', { stdio: 'inherit' });\n\n  console.log('\\n‚úÖ ¬°Configuraci√≥n completada exitosamente!');\n  console.log('\\nüîê CREDENCIALES DE PRUEBA:');\n  console.log('üëë ADMINISTRADOR: admin@appleaura.com / Admin2024!');\n  console.log('üíº VENDEDOR: vendedor@appleaura.com / Seller2024!');\n  console.log('üõçÔ∏è COMPRADOR: comprador@appleaura.com / Buyer2024!');\n  console.log('\\nüöÄ Para iniciar la aplicaci√≥n: npm run dev');\n\n} catch (error) {\n  console.error('‚ùå Error durante la configuraci√≥n:', error.message);\n  process.exit(1);\n}\n","size_bytes":1932},"AppleAura/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"AppleAura/replit.md":{"content":"# Silicon Trail - Marketplace Tecnol√≥gico\n\n## Descripci√≥n del Proyecto\nSilicon Trail es un marketplace vertical de tecnolog√≠a con dise√±o inspirado en Apple Human Interface Guidelines, que ofrece una experiencia unificada para compradores, vendedores y administradores.\n\n## Caracter√≠sticas Principales\n- **Autenticaci√≥n Unificada Multi-Rol**: Registro/login √∫nico con selecci√≥n de rol (comprador/vendedor)\n- **Tres Vistas Principales**: Comprador (default), Vendedor, Administrador\n- **Dise√±o Apple HIG**: Claridad, deferencia, profundidad\n- **Modo Oscuro**: Opcional, siguiendo patrones de Apple\n- **Arquitectura Separada**: Frontend y Backend en carpetas independientes\n\n## Arquitectura del Proyecto\n```\n/\n‚îú‚îÄ‚îÄ client/            # Frontend - React/TypeScript/Tailwind\n‚îú‚îÄ‚îÄ server/            # Backend - Express/PostgreSQL/Drizzle\n‚îú‚îÄ‚îÄ shared/            # Esquemas compartidos entre frontend y backend\n‚îú‚îÄ‚îÄ frontend/          # Documentaci√≥n organizacional del frontend\n‚îî‚îÄ‚îÄ backend/           # Documentaci√≥n organizacional del backend\n```\n\n### Estructura F√≠sica vs Conceptual\n- **Frontend**: Archivos f√≠sicos en `client/` (limitaci√≥n de configuraci√≥n Replit)\n- **Backend**: Archivos f√≠sicos en `server/` (limitaci√≥n de configuraci√≥n Replit)  \n- **Carpetas `frontend/` y `backend/`**: Documentaci√≥n organizacional conceptual\n\n## Especificaciones T√©cnicas\n\n### Ficha de Producto\n- Foto del producto\n- Nombre del producto\n- Precio\n- Estado de stock (en stock/pocos disponibles/agotado)\n- Ciudad del vendedor (Chile)\n- Env√≠o gratis (si aplica)\n- Nombre del vendedor\n- Calificaci√≥n por estrellas basada en rese√±as\n\n### Roles de Usuario\n1. **Comprador** (vista por defecto)\n   - Explorar cat√°logo\n   - Gestionar carrito\n   - Realizar compras\n   - Escribir rese√±as\n\n2. **Vendedor**\n   - Gestionar productos\n   - Ver √≥rdenes\n   - M√©tricas de ventas\n   - Gesti√≥n de stock\n\n3. **Administrador**\n   - Gesti√≥n de categor√≠as\n   - Moderaci√≥n\n   - Reportes y m√©tricas\n   - Gesti√≥n de usuarios\n\n## Preferencias del Usuario\n- Marketplace enfocado en Chile\n- Informaci√≥n detallada en fichas de producto\n- Interface limpia siguiendo Apple HIG\n- Estructura modular y mantenible\n\n## Cambios Recientes\n- Creaci√≥n inicial del proyecto (Agosto 19, 2025)\n- Definici√≥n de arquitectura separada frontend/backend\n- Especificaciones de ficha de producto detalladas","size_bytes":2401},"AppleAura/setup-database.js":{"content":"\n#!/usr/bin/env node\n\nconst readline = require('readline');\nconst fs = require('fs');\nconst { execSync } = require('child_process');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nconsole.log('üóÑÔ∏è  Configurador de Base de Datos para AppleAura');\nconsole.log('================================================');\nconsole.log('');\nconsole.log('Opciones disponibles:');\nconsole.log('1. Usar Neon (PostgreSQL gratuito en la nube) - RECOMENDADO');\nconsole.log('2. Usar Railway (PostgreSQL gratuito)');\nconsole.log('3. Configurar manualmente');\nconsole.log('');\n\nrl.question('¬øQu√© opci√≥n prefieres? (1/2/3): ', (answer) => {\n  switch (answer) {\n    case '1':\n      console.log('');\n      console.log('üöÄ Para configurar Neon:');\n      console.log('1. Ve a https://neon.tech');\n      console.log('2. Crea una cuenta gratuita');\n      console.log('3. Crea un nuevo proyecto');\n      console.log('4. Copia la URL de conexi√≥n (Database URL)');\n      console.log('5. Ve a Secrets en Replit y a√±ade DATABASE_URL');\n      console.log('');\n      console.log('Ejemplo de URL: postgresql://user:pass@ep-example.us-east-1.postgres.vercel-storage.com/dbname');\n      break;\n    case '2':\n      console.log('');\n      console.log('üöÇ Para configurar Railway:');\n      console.log('1. Ve a https://railway.app');\n      console.log('2. Crea una cuenta gratuita');\n      console.log('3. Crea un nuevo proyecto con PostgreSQL');\n      console.log('4. Copia la URL de conexi√≥n');\n      console.log('5. Ve a Secrets en Replit y a√±ade DATABASE_URL');\n      break;\n    case '3':\n      rl.question('Ingresa tu DATABASE_URL: ', (url) => {\n        if (url) {\n          console.log('‚úÖ Guardando configuraci√≥n...');\n          // Aqu√≠ podr√≠as guardar en .env si fuera necesario\n          console.log('¬°Configuraci√≥n guardada! Ahora ejecuta: npm run db:seed');\n        }\n        rl.close();\n      });\n      return;\n    default:\n      console.log('Opci√≥n no v√°lida');\n  }\n  rl.close();\n});\n","size_bytes":2024},"AppleAura/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        // Apple colors\n        'apple-blue': 'var(--apple-blue)',\n        'apple-blue-dark': 'var(--apple-blue-dark)',\n        'apple-green': 'var(--apple-green)',\n        'apple-green-dark': 'var(--apple-green-dark)',\n        'apple-red': 'var(--apple-red)',\n        'apple-red-dark': 'var(--apple-red-dark)',\n        'tech-blue': 'var(--tech-blue)',\n        'tech-green': 'var(--tech-green)',\n        'apple-gray-1': 'var(--apple-gray-1)',\n        'apple-gray-2': 'var(--apple-gray-2)',\n        'apple-gray-3': 'var(--apple-gray-3)',\n        'apple-gray-4': 'var(--apple-gray-4)',\n        'apple-gray-5': 'var(--apple-gray-5)',\n        'apple-gray-6': 'var(--apple-gray-6)',\n        'apple-dark-1': 'var(--apple-dark-1)',\n        'apple-dark-2': 'var(--apple-dark-2)',\n        'apple-dark-3': 'var(--apple-dark-3)',\n        'apple-dark-4': 'var(--apple-dark-4)',\n        'apple-dark-5': 'var(--apple-dark-5)',\n        'apple-dark-6': 'var(--apple-dark-6)',\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3024},"AppleAura/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"AppleAura/backend/README.md":{"content":"# Backend - Silicon Trail\n\nEsta carpeta representa conceptualmente el backend del marketplace Silicon Trail.\n\n## Ubicaci√≥n Real de los Archivos\n\nDebido a limitaciones de configuraci√≥n del entorno Replit, los archivos del backend se encuentran f√≠sicamente en la carpeta `server/` en la ra√≠z del proyecto.\n\n### Estructura del Backend:\n```\nserver/\n‚îú‚îÄ‚îÄ index.ts           # Servidor principal Express\n‚îú‚îÄ‚îÄ routes.ts          # Rutas de API\n‚îú‚îÄ‚îÄ storage.ts         # Capa de acceso a datos\n‚îî‚îÄ‚îÄ vite.ts           # Configuraci√≥n desarrollo\n\n```\n\n### Esquemas de Base de Datos:\nLos esquemas se encuentran en `shared/schema.ts` para ser compartidos entre frontend y backend.\n\n### Tecnolog√≠as Utilizadas:\n- **Node.js** con TypeScript\n- **Express.js** para el servidor web\n- **PostgreSQL** con **Drizzle ORM** \n- **JWT** para autenticaci√≥n\n- **bcrypt** para hash de contrase√±as\n\n### Caracter√≠sticas del Backend:\n- ‚úÖ API RESTful completa\n- ‚úÖ Autenticaci√≥n JWT con roles\n- ‚úÖ Gesti√≥n de usuarios, productos y √≥rdenes\n- ‚úÖ Sistema de rese√±as y calificaciones\n- ‚úÖ Dashboard administrativo con m√©tricas\n- ‚úÖ Validaci√≥n de datos con Zod\n\n### Endpoints Principales:\n- `POST /api/auth/register` - Registro de usuarios\n- `POST /api/auth/login` - Inicio de sesi√≥n\n- `GET /api/products` - Lista de productos\n- `POST /api/products` - Crear producto (vendedor)\n- `POST /api/cart/add` - Agregar al carrito\n- `POST /api/orders` - Crear orden\n- `GET /api/admin/*` - Endpoints administrativos","size_bytes":1512},"AppleAura/frontend/README.md":{"content":"# Frontend - Silicon Trail\n\nEsta carpeta representa conceptualmente el frontend del marketplace Silicon Trail. \n\n## Ubicaci√≥n Real de los Archivos\n\nDebido a limitaciones de configuraci√≥n del entorno Replit, los archivos del frontend se encuentran f√≠sicamente en la carpeta `client/` en la ra√≠z del proyecto.\n\n### Estructura del Frontend:\n```\nclient/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ components/     # Componentes React reutilizables\n‚îÇ   ‚îú‚îÄ‚îÄ pages/         # P√°ginas de la aplicaci√≥n\n‚îÇ   ‚îú‚îÄ‚îÄ hooks/         # Hooks personalizados\n‚îÇ   ‚îú‚îÄ‚îÄ lib/           # Utilidades y configuraci√≥n\n‚îÇ   ‚îú‚îÄ‚îÄ App.tsx        # Componente principal\n‚îÇ   ‚îú‚îÄ‚îÄ main.tsx       # Punto de entrada\n‚îÇ   ‚îî‚îÄ‚îÄ index.css      # Estilos globales\n‚îú‚îÄ‚îÄ index.html         # Template HTML\n‚îî‚îÄ‚îÄ ...\n\n```\n\n### Tecnolog√≠as Utilizadas:\n- **React 18** con TypeScript\n- **Wouter** para routing\n- **Tailwind CSS** + **shadcn/ui** para estilos\n- **TanStack Query** para manejo de estado servidor\n- **Apple Human Interface Guidelines** como base del dise√±o\n\n### Caracter√≠sticas del Frontend:\n- ‚úÖ Dise√±o Apple HIG con modo oscuro\n- ‚úÖ Autenticaci√≥n unificada multi-rol\n- ‚úÖ Cat√°logo de productos con filtros\n- ‚úÖ Carrito de compras funcional\n- ‚úÖ Dashboard para vendedores\n- ‚úÖ Panel administrativo\n- ‚úÖ Responsive design","size_bytes":1350},"AppleAura/server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedDatabase } from \"./seed\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Poblar base de datos si est√° vac√≠a\n  if (process.env.SEED_DB === \"true\") {\n    await seedDatabase();\n  }\n\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2218},"AppleAura/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertProductSchema, insertReviewSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { insertSellerProfileSchema } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Auth middleware\nconst authenticateToken = async (req: any, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    const user = await storage.getUser(decoded.userId);\n    if (!user) {\n      return res.status(401).json({ message: 'Invalid token' });\n    }\n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(401).json({ message: 'Invalid token' });\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n\n      // Check if user exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      // Hash password\n      const passwordHash = await bcrypt.hash(userData.passwordHash!, 10);\n\n      const user = await storage.createUser({\n        ...userData,\n        passwordHash\n      });\n\n      // Create JWT\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '7d' });\n\n      res.json({\n        user: { ...user, passwordHash: undefined },\n        token\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Registration failed\", error });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.passwordHash) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValid = await bcrypt.compare(password, user.passwordHash);\n      if (!isValid) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '7d' });\n\n      res.json({\n        user: { ...user, passwordHash: undefined },\n        token\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Login failed\", error });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req: any, res) => {\n    res.json({ user: { ...req.user, passwordHash: undefined } });\n  });\n\n  // Categories\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\", error });\n    }\n  });\n\n  // Products\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const filters = {\n        categoryId: req.query.categoryId as string,\n        search: req.query.search as string,\n        sellerId: req.query.sellerId as string,\n        status: req.query.status as string,\n        limit: req.query.limit ? parseInt(req.query.limit as string) : 20,\n        offset: req.query.offset ? parseInt(req.query.offset as string) : 0,\n      };\n\n      const products = await storage.getProducts(filters);\n      res.json(products);\n    } catch (error) {\n      console.log(\"Error obteniendo productos de BD, usando datos mock:\", error);\n\n      // Fallback to mock data when database is not available\n      const mockProducts = [\n        {\n          id: \"1\",\n          title: \"iPhone 15 Pro Max\",\n          description: \"El iPhone m√°s avanzado hasta ahora. Con chip A17 Pro, sistema de c√°maras Pro y dise√±o en titanio.\",\n          price: 1299990,\n          images: [\"/images/products/iphone-15-pro.svg\"],\n          status: \"active\",\n          categoryId: \"smartphones\",\n          sellerId: \"seller1\",\n          sku: \"IPH15PM-256-TB\",\n          slug: \"iphone-15-pro-max\",\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: \"2\",\n          title: \"MacBook Pro 14\\\" M3\",\n          description: \"Port√°til profesional con chip M3, pantalla Liquid Retina XDR y hasta 22 horas de bater√≠a.\",\n          price: 2199990,\n          images: [\"/images/products/macbook-pro-14.svg\"],\n          status: \"active\",\n          categoryId: \"laptops\",\n          sellerId: \"seller1\",\n          sku: \"MBP14-M3-512-SG\",\n          slug: \"macbook-pro-14-m3\",\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: \"3\",\n          title: \"iPad Pro 12.9\\\" M2\",\n          description: \"La experiencia iPad definitiva con chip M2, pantalla Liquid Retina XDR y compatibilidad con Apple Pencil.\",\n          price: 1349990,\n          images: [\"/images/products/ipad-pro-129.svg\"],\n          status: \"active\",\n          categoryId: \"tablets\",\n          sellerId: \"seller1\",\n          sku: \"IPD129-M2-256-SG\",\n          slug: \"ipad-pro-129-m2\",\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: \"4\",\n          title: \"AirPods Pro (3¬™ generaci√≥n)\",\n          description: \"Cancelaci√≥n activa de ruido, audio espacial personalizado y hasta 6 horas de reproducci√≥n.\",\n          price: 279990,\n          images: [\"/images/products/airpods-pro.svg\"],\n          status: \"active\",\n          categoryId: \"audio\",\n          sellerId: \"seller1\",\n          sku: \"APP3-WHT\",\n          slug: \"airpods-pro-3\",\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: \"5\",\n          title: \"Apple Watch Series 9\",\n          description: \"El smartwatch m√°s avanzado con chip S9, pantalla Always-On m√°s brillante.\",\n          price: 449990,\n          images: [\"/images/products/apple-watch-s9.svg\"],\n          status: \"active\",\n          categoryId: \"wearables\",\n          sellerId: \"seller1\",\n          sku: \"AWS9-45-GPS-MN\",\n          slug: \"apple-watch-series-9\",\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: \"6\",\n          title: \"iMac 24\\\" M3\",\n          description: \"Todo en uno elegante con chip M3, pantalla 4.5K Retina y dise√±o ultradelgado.\",\n          price: 1799990,\n          images: [\"/images/products/imac-24.svg\"],\n          status: \"active\",\n          categoryId: \"desktops\",\n          sellerId: \"seller1\",\n          sku: \"IMAC24-M3-512-BL\",\n          slug: \"imac-24-m3\",\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      ];\n\n      // Apply search filter to mock data si existe\n      let filteredProducts = mockProducts;\n      const searchTerm = req.query.search as string;\n      if (searchTerm) {\n        filteredProducts = mockProducts.filter(product =>\n          product.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          product.description.toLowerCase().includes(searchTerm.toLowerCase())\n        );\n      }\n\n      res.json(filteredProducts);\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProductById(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\", error });\n    }\n  });\n\n  app.post(\"/api/products\", authenticateToken, async (req: any, res) => {\n    try {\n      if (req.user.role !== 'seller' && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      let sellerId = req.body.sellerId;\n\n      // If user is a seller, get their profile ID\n      if (req.user.role === 'seller') {\n        const sellerProfile = await storage.getSellerProfile(req.user.id);\n        if (!sellerProfile) {\n          return res.status(400).json({ message: \"Seller profile not found\" });\n        }\n        sellerId = sellerProfile.id;\n      }\n\n      const productData = insertProductSchema.parse({\n        ...req.body,\n        sellerId\n      });\n\n      const product = await storage.createProduct(productData);\n      res.json(product);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create product\", error });\n    }\n  });\n\n  // Product variants\n  app.get(\"/api/products/:id/variants\", async (req, res) => {\n    try {\n      const variants = await storage.getVariantsByProductId(req.params.id);\n      res.json(variants);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch variants\", error });\n    }\n  });\n\n  // Cart\n  app.get(\"/api/cart\", authenticateToken, async (req: any, res) => {\n    try {\n      const cartItems = await storage.getCartByUserId(req.user.id);\n      res.json(cartItems);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch cart\", error });\n    }\n  });\n\n  app.post(\"/api/cart/add\", authenticateToken, async (req: any, res) => {\n    try {\n      const { variantId, quantity } = req.body;\n      await storage.addToCart(req.user.id, variantId, quantity);\n      res.json({ message: \"Item added to cart\" });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to add to cart\", error });\n    }\n  });\n\n  app.put(\"/api/cart/update\", authenticateToken, async (req: any, res) => {\n    try {\n      const { variantId, quantity } = req.body;\n      await storage.updateCartItem(req.user.id, variantId, quantity);\n      res.json({ message: \"Cart updated\" });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update cart\", error });\n    }\n  });\n\n  app.delete(\"/api/cart/remove/:variantId\", authenticateToken, async (req: any, res) => {\n    try {\n      await storage.removeFromCart(req.user.id, req.params.variantId);\n      res.json({ message: \"Item removed from cart\" });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to remove from cart\", error });\n    }\n  });\n\n  app.delete(\"/api/cart/clear\", authenticateToken, async (req: any, res) => {\n    try {\n      await storage.clearCart(req.user.id);\n      res.json({ message: \"Cart cleared\" });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to clear cart\", error });\n    }\n  });\n\n  // Seller routes\n  app.post(\"/api/seller/profile\", authenticateToken, async (req: any, res) => {\n    try {\n      if (req.user.role !== 'buyer') {\n        return res.status(400).json({ message: \"Only buyers can become sellers\" });\n      }\n\n      const profileData = insertSellerProfileSchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n\n      const profile = await storage.createSellerProfile(profileData);\n\n      // Update user role\n      await storage.updateUser(req.user.id, { role: 'seller' });\n\n      res.json(profile);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create seller profile\", error });\n    }\n  });\n\n  app.get(\"/api/seller/profile\", authenticateToken, async (req: any, res) => {\n    try {\n      const profile = await storage.getSellerProfile(req.user.id);\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch seller profile\", error });\n    }\n  });\n\n  app.get(\"/api/seller/orders\", authenticateToken, async (req: any, res) => {\n    try {\n      if (req.user.role !== 'seller') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const sellerProfile = await storage.getSellerProfile(req.user.id);\n      if (!sellerProfile) {\n        return res.status(404).json({ message: \"Seller profile not found\" });\n      }\n\n      const orders = await storage.getOrdersBySellerId(sellerProfile.id);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\", error });\n    }\n  });\n\n  // Reviews\n  app.get(\"/api/products/:id/reviews\", async (req, res) => {\n    try {\n      const reviews = await storage.getReviewsByProductId(req.params.id);\n      res.json(reviews);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch reviews\", error });\n    }\n  });\n\n  app.post(\"/api/products/:id/reviews\", authenticateToken, async (req: any, res) => {\n    try {\n      const reviewData = insertReviewSchema.parse({\n        ...req.body,\n        userId: req.user.id,\n        productId: req.params.id\n      });\n\n      const review = await storage.createReview(reviewData);\n      res.json(review);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create review\", error });\n    }\n  });\n\n  // Orders\n  app.get(\"/api/orders\", authenticateToken, async (req: any, res) => {\n    try {\n      const orders = await storage.getOrdersByUserId(req.user.id);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\", error });\n    }\n  });\n\n  app.post(\"/api/orders\", authenticateToken, async (req: any, res) => {\n    try {\n      const orderData = {\n        ...req.body,\n        userId: req.user.id\n      };\n\n      const order = await storage.createOrder(orderData);\n      res.json(order);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create order\", error });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":13570},"AppleAura/server/seed.ts":{"content":"import { storage } from \"./storage\";\nimport bcrypt from \"bcrypt\";\n\nconst SAMPLE_IMAGES = [\n  \"/images/products/macbook-pro-14.svg\", // MacBook\n  \"/images/products/iphone-15-pro-max.svg\", // iPhone\n  \"/images/products/ipad-pro-129.svg\", // iPad\n  \"/images/products/airpods-pro.svg\", // AirPods\n  \"/images/products/apple-watch-s9.svg\", // Apple Watch\n  \"/images/products/macbook-pro-14.svg\", // MacBook Pro\n  \"/images/products/iphone-15-pro-max.svg\", // iPhone 12\n  \"/images/products/imac-24.svg\", // iMac\n];\n\nasync function seedDatabase() {\n  console.log(\"üå± Iniciando proceso de poblado de base de datos...\");\n\n  try {\n    // 1. Crear categor√≠as\n    console.log(\"üì± Creando categor√≠as...\");\n    const categories = await Promise.all([\n      storage.createCategory({ name: \"Smartphones\", description: \"Tel√©fonos inteligentes de √∫ltima generaci√≥n\", icon: \"üì±\" }),\n      storage.createCategory({ name: \"Laptops\", description: \"Computadoras port√°tiles\", icon: \"üíª\" }),\n      storage.createCategory({ name: \"Tablets\", description: \"Tabletas y iPads\", icon: \"üì±\" }),\n      storage.createCategory({ name: \"Audio\", description: \"Aud√≠fonos y accesorios de audio\", icon: \"üéß\" }),\n      storage.createCategory({ name: \"Smartwatch\", description: \"Relojes inteligentes\", icon: \"‚åö\" }),\n    ]);\n\n    // 2. Crear usuarios de prueba con credenciales espec√≠ficas\n    const buyer = await storage.createUser({\n      email: \"comprador@appleaura.com\",\n      passwordHash: await bcrypt.hash(\"Buyer2024!\", 10),\n      name: \"Mar√≠a Gonz√°lez\",\n      role: \"buyer\"\n    });\n\n    // Vendedor\n    const seller = await storage.createUser({\n      email: \"vendedor@appleaura.com\",\n      passwordHash: await bcrypt.hash(\"Seller2024!\", 10),\n      name: \"Carlos Mendoza\",\n      role: \"seller\"\n    });\n\n    // Administrador\n    const admin = await storage.createUser({\n      email: \"admin@appleaura.com\",\n      passwordHash: await bcrypt.hash(\"Admin2024!\", 10),\n      name: \"Ana Rodr√≠guez\",\n      role: \"admin\"\n    });\n\n    // 3. Crear perfil de vendedor\n    console.log(\"üè™ Creando perfil de vendedor...\");\n    const sellerProfile = await storage.createSellerProfile({\n      userId: seller.id,\n      displayName: \"TechStore Chile\",\n      description: \"Tu tienda de confianza para productos Apple y tecnolog√≠a de calidad\",\n      status: \"verified\"\n    });\n\n    // 4. Crear productos de ejemplo\n    console.log(\"üì¶ Creando productos de ejemplo...\");\n    const products = [\n      {\n        title: \"MacBook Pro 14 pulgadas\",\n        description: \"La laptop m√°s potente de Apple con chip M3 Pro para profesionales creativos\",\n        categoryId: categories[1].id, // Laptops\n        sellerId: sellerProfile.id,\n        images: [SAMPLE_IMAGES[0]],\n        status: \"active\" as const,\n        specsJson: { processor: \"M3 Pro\", memory: \"18GB\", storage: \"512GB SSD\" }\n      },\n      {\n        title: \"iPhone 15 Pro Max\",\n        description: \"El iPhone m√°s avanzado con c√°mara de 48MP y titanio aeroespacial\",\n        categoryId: categories[0].id, // Smartphones\n        sellerId: sellerProfile.id,\n        images: [SAMPLE_IMAGES[1]],\n        status: \"active\" as const,\n        specsJson: { storage: \"256GB\", camera: \"48MP\", material: \"Titanio\" }\n      },\n      {\n        title: \"iPad Pro 12.9 pulgadas\",\n        description: \"La tablet m√°s poderosa con chip M2 y pantalla Liquid Retina XDR\",\n        categoryId: categories[2].id, // Tablets\n        sellerId: sellerProfile.id,\n        images: [SAMPLE_IMAGES[2]],\n        status: \"active\" as const,\n        specsJson: { processor: \"M2\", screen: \"12.9 Liquid Retina XDR\", storage: \"128GB\" }\n      },\n      {\n        title: \"AirPods Pro (2da generaci√≥n)\",\n        description: \"Aud√≠fonos premium con cancelaci√≥n activa de ruido y audio espacial\",\n        categoryId: categories[3].id, // Audio\n        sellerId: sellerProfile.id,\n        images: [SAMPLE_IMAGES[3]],\n        status: \"active\" as const,\n        specsJson: { battery: \"6 horas\", features: \"Cancelaci√≥n de ruido, Audio espacial\" }\n      },\n      {\n        title: \"Apple Watch Series 9\",\n        description: \"El reloj inteligente m√°s avanzado con GPS y monitoreo de salud\",\n        categoryId: categories[4].id, // Smartwatch\n        sellerId: sellerProfile.id,\n        images: [SAMPLE_IMAGES[4]],\n        status: \"active\" as const,\n        specsJson: { size: \"45mm\", connectivity: \"GPS + Cellular\", battery: \"18 horas\" }\n      }\n    ];\n\n    const createdProducts = [];\n    for (const productData of products) {\n      const product = await storage.createProduct(productData);\n      createdProducts.push(product);\n\n      // Crear variante para cada producto\n      await storage.createVariant({\n        productId: product.id,\n        sku: `${product.id}-DEFAULT`,\n        priceCents: Math.floor(Math.random() * 2000000) + 500000, // Entre $500k y $2.5M CLP\n        currency: \"CLP\",\n        attributesJson: { color: \"Space Gray\", size: \"Standard\" }\n      });\n    }\n\n    console.log(`‚úÖ Base de datos poblada exitosamente:`);\n    console.log(`   üë• ${3} usuarios creados`);\n    console.log(`   üìÅ ${categories.length} categor√≠as creadas`);\n    console.log(`   üè™ ${1} perfil de vendedor creado`);\n    console.log(`   üì¶ ${createdProducts.length} productos creados`);\n    console.log(`   üí∞ ${createdProducts.length} variantes de precio creadas`);\n    console.log(`\\nüîë Credenciales de acceso creadas en credentials.md`);\n\n  } catch (error) {\n    console.error(\"‚ùå Error al poblar la base de datos:\", error);\n    throw error;\n  }\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase()\n    .then(() => {\n      console.log(\"üå± Proceso de poblado completado\");\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error(\"üí• Error durante el poblado:\", error);\n      process.exit(1);\n    });\n}\n\nexport { seedDatabase };","size_bytes":5865},"AppleAura/server/storage.ts":{"content":"\nimport { drizzle } from \"drizzle-orm/better-sqlite3\";\nimport Database from \"better-sqlite3\";\nimport { eq, and, desc, asc, like, inArray, sql } from \"drizzle-orm\";\nimport * as schema from \"@shared/schema\";\nimport type {\n  User, InsertUser,\n  Product, InsertProduct,\n  ProductVariant, InsertProductVariant,\n  SellerProfile, InsertSellerProfile,\n  Order, InsertOrder,\n  Review, InsertReview,\n  Category, CartItem, OrderItem\n} from \"@shared/schema\";\n\nconst databaseUrl = process.env.DATABASE_URL || \"./database.sqlite\";\nlet dbPath = databaseUrl;\n\n// Si la URL contiene \"file:\", remover el prefijo\nif (dbPath.startsWith(\"file:\")) {\n  dbPath = dbPath.replace(\"file:\", \"\");\n}\n\n// Si es una URL de PostgreSQL, usar SQLite por defecto\nif (dbPath.startsWith(\"postgresql://\")) {\n  dbPath = \"./database.sqlite\";\n  console.log(`‚ö†Ô∏è Detectada URL de PostgreSQL, usando SQLite por defecto: ${dbPath}`);\n} else {\n  console.log(`üìÅ Usando base de datos SQLite: ${dbPath}`);\n}\n\nconst sqlite = new Database(dbPath);\nconst db = drizzle(sqlite, { schema });\n\n// Crear tablas si no existen\nsqlite.exec(`\n  CREATE TABLE IF NOT EXISTS users (\n    id TEXT PRIMARY KEY,\n    email TEXT NOT NULL UNIQUE,\n    password_hash TEXT,\n    name TEXT NOT NULL,\n    role TEXT NOT NULL DEFAULT 'buyer',\n    created_at INTEGER DEFAULT (strftime('%s', 'now'))\n  );\n\n  CREATE TABLE IF NOT EXISTS seller_profiles (\n    id TEXT PRIMARY KEY,\n    user_id TEXT NOT NULL UNIQUE,\n    display_name TEXT NOT NULL,\n    description TEXT,\n    status TEXT NOT NULL DEFAULT 'pending',\n    created_at INTEGER DEFAULT (strftime('%s', 'now')),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  );\n\n  CREATE TABLE IF NOT EXISTS categories (\n    id TEXT PRIMARY KEY,\n    name TEXT NOT NULL UNIQUE,\n    description TEXT,\n    parent_id TEXT,\n    icon TEXT,\n    FOREIGN KEY (parent_id) REFERENCES categories(id)\n  );\n\n  CREATE TABLE IF NOT EXISTS products (\n    id TEXT PRIMARY KEY,\n    seller_id TEXT NOT NULL,\n    category_id TEXT NOT NULL,\n    title TEXT NOT NULL,\n    slug TEXT NOT NULL UNIQUE,\n    description TEXT,\n    specs_json TEXT,\n    images TEXT NOT NULL DEFAULT '[]',\n    status TEXT NOT NULL DEFAULT 'draft',\n    created_at INTEGER DEFAULT (strftime('%s', 'now')),\n    FOREIGN KEY (seller_id) REFERENCES seller_profiles(id),\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n  );\n\n  CREATE TABLE IF NOT EXISTS product_variants (\n    id TEXT PRIMARY KEY,\n    product_id TEXT NOT NULL,\n    sku TEXT NOT NULL UNIQUE,\n    price_cents INTEGER NOT NULL,\n    currency TEXT NOT NULL DEFAULT 'CLP',\n    attributes_json TEXT,\n    FOREIGN KEY (product_id) REFERENCES products(id)\n  );\n\n  CREATE TABLE IF NOT EXISTS reviews (\n    id TEXT PRIMARY KEY,\n    user_id TEXT NOT NULL,\n    product_id TEXT NOT NULL,\n    rating INTEGER NOT NULL,\n    comment TEXT,\n    created_at INTEGER DEFAULT (strftime('%s', 'now')),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (product_id) REFERENCES products(id)\n  );\n\n  CREATE TABLE IF NOT EXISTS carts (\n    id TEXT PRIMARY KEY,\n    user_id TEXT NOT NULL,\n    created_at INTEGER DEFAULT (strftime('%s', 'now')),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  );\n\n  CREATE TABLE IF NOT EXISTS cart_items (\n    id TEXT PRIMARY KEY,\n    cart_id TEXT NOT NULL,\n    variant_id TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (cart_id) REFERENCES carts(id) ON DELETE CASCADE,\n    FOREIGN KEY (variant_id) REFERENCES product_variants(id)\n  );\n\n  CREATE TABLE IF NOT EXISTS orders (\n    id TEXT PRIMARY KEY,\n    user_id TEXT NOT NULL,\n    status TEXT NOT NULL DEFAULT 'pending',\n    total_cents INTEGER NOT NULL,\n    currency TEXT NOT NULL DEFAULT 'CLP',\n    shipping_address_id TEXT,\n    created_at INTEGER DEFAULT (strftime('%s', 'now')),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  );\n\n  CREATE TABLE IF NOT EXISTS order_items (\n    id TEXT PRIMARY KEY,\n    order_id TEXT NOT NULL,\n    variant_id TEXT NOT NULL,\n    seller_id TEXT NOT NULL,\n    unit_price_cents INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (variant_id) REFERENCES product_variants(id),\n    FOREIGN KEY (seller_id) REFERENCES seller_profiles(id)\n  );\n`);\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n\n  // Seller Profiles\n  getSellerProfile(userId: string): Promise<SellerProfile | undefined>;\n  createSellerProfile(profile: InsertSellerProfile): Promise<SellerProfile>;\n  updateSellerProfile(id: string, updates: Partial<SellerProfile>): Promise<SellerProfile | undefined>;\n\n  // Categories\n  getCategories(): Promise<Category[]>;\n  getCategoryById(id: string): Promise<Category | undefined>;\n\n  // Products\n  getProducts(filters?: {\n    categoryId?: string;\n    search?: string;\n    priceMin?: number;\n    priceMax?: number;\n    sellerId?: string;\n    status?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Product[]>;\n  getProductById(id: string): Promise<Product | undefined>;\n  getProductBySlug(slug: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined>;\n\n  // Product Variants\n  getVariantsByProductId(productId: string): Promise<ProductVariant[]>;\n  getVariantById(id: string): Promise<ProductVariant | undefined>;\n  createVariant(variant: InsertProductVariant): Promise<ProductVariant>;\n\n  // Cart\n  getCartByUserId(userId: string): Promise<CartItem[]>;\n  addToCart(userId: string, variantId: string, quantity: number): Promise<void>;\n  updateCartItem(userId: string, variantId: string, quantity: number): Promise<void>;\n  removeFromCart(userId: string, variantId: string): Promise<void>;\n  clearCart(userId: string): Promise<void>;\n\n  // Orders\n  getOrdersByUserId(userId: string): Promise<Order[]>;\n  getOrdersBySellerId(sellerId: string): Promise<OrderItem[]>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined>;\n\n  // Reviews\n  getReviewsByProductId(productId: string): Promise<Review[]>;\n  createReview(review: InsertReview): Promise<Review>;\n\n  // Categories\n  createCategory(category: { name: string; description?: string; icon?: string; parentId?: string }): Promise<Category>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(schema.users).where(eq(schema.users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(schema.users).where(eq(schema.users.email, email));\n    return user;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [created] = await db.insert(schema.users).values(user).returning();\n    return created;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [updated] = await db.update(schema.users)\n      .set(updates)\n      .where(eq(schema.users.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Seller Profiles\n  async getSellerProfile(userId: string): Promise<SellerProfile | undefined> {\n    const [profile] = await db.select()\n      .from(schema.sellerProfiles)\n      .where(eq(schema.sellerProfiles.userId, userId));\n    return profile;\n  }\n\n  async createSellerProfile(profile: InsertSellerProfile): Promise<SellerProfile> {\n    const [created] = await db.insert(schema.sellerProfiles).values(profile).returning();\n    return created;\n  }\n\n  async updateSellerProfile(id: string, updates: Partial<SellerProfile>): Promise<SellerProfile | undefined> {\n    const [updated] = await db.update(schema.sellerProfiles)\n      .set(updates)\n      .where(eq(schema.sellerProfiles.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(schema.categories).orderBy(asc(schema.categories.name));\n  }\n\n  async getCategoryById(id: string): Promise<Category | undefined> {\n    const [category] = await db.select().from(schema.categories).where(eq(schema.categories.id, id));\n    return category;\n  }\n\n  // Products\n  async getProducts(filters?: {\n    categoryId?: string;\n    search?: string;\n    priceMin?: number;\n    priceMax?: number;\n    sellerId?: string;\n    status?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Product[]> {\n    let query = db.select().from(schema.products);\n\n    const conditions = [];\n\n    if (filters?.categoryId) {\n      conditions.push(eq(schema.products.categoryId, filters.categoryId));\n    }\n\n    if (filters?.sellerId) {\n      conditions.push(eq(schema.products.sellerId, filters.sellerId));\n    }\n\n    if (filters?.status) {\n      conditions.push(eq(schema.products.status, filters.status as any));\n    } else {\n      conditions.push(eq(schema.products.status, 'active'));\n    }\n\n    if (filters?.search) {\n      conditions.push(like(schema.products.title, `%${filters.search}%`));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    query = query.orderBy(desc(schema.products.createdAt));\n\n    if (filters?.limit) {\n      query = query.limit(filters.limit);\n    }\n\n    if (filters?.offset) {\n      query = query.offset(filters.offset);\n    }\n\n    return await query;\n  }\n\n  async getProductById(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(schema.products).where(eq(schema.products.id, id));\n    return product;\n  }\n\n  async getProductBySlug(slug: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(schema.products).where(eq(schema.products.slug, slug));\n    return product;\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const slug = product.title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');\n    const [created] = await db.insert(schema.products)\n      .values({ ...product, slug })\n      .returning();\n    return created;\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined> {\n    const [updated] = await db.update(schema.products)\n      .set(updates)\n      .where(eq(schema.products.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Product Variants\n  async getVariantsByProductId(productId: string): Promise<ProductVariant[]> {\n    return await db.select()\n      .from(schema.productVariants)\n      .where(eq(schema.productVariants.productId, productId));\n  }\n\n  async getVariantById(id: string): Promise<ProductVariant | undefined> {\n    const [variant] = await db.select()\n      .from(schema.productVariants)\n      .where(eq(schema.productVariants.id, id));\n    return variant;\n  }\n\n  async createVariant(variant: InsertProductVariant): Promise<ProductVariant> {\n    const [created] = await db.insert(schema.productVariants).values(variant).returning();\n    return created;\n  }\n\n  // Alias para compatibilidad\n  async createProductVariant(variant: InsertProductVariant): Promise<ProductVariant> {\n    return this.createVariant(variant);\n  }\n\n  // Cart\n  async getCartByUserId(userId: string): Promise<CartItem[]> {\n    const result = await db.select({\n      id: schema.cartItems.id,\n      cartId: schema.cartItems.cartId,\n      variantId: schema.cartItems.variantId,\n      quantity: schema.cartItems.quantity,\n    })\n    .from(schema.cartItems)\n    .innerJoin(schema.carts, eq(schema.cartItems.cartId, schema.carts.id))\n    .where(eq(schema.carts.userId, userId));\n\n    return result;\n  }\n\n  async addToCart(userId: string, variantId: string, quantity: number): Promise<void> {\n    // Get or create cart\n    let [cart] = await db.select().from(schema.carts).where(eq(schema.carts.userId, userId));\n\n    if (!cart) {\n      [cart] = await db.insert(schema.carts).values({ userId }).returning();\n    }\n\n    // Check if item already exists\n    const [existingItem] = await db.select()\n      .from(schema.cartItems)\n      .where(and(\n        eq(schema.cartItems.cartId, cart.id),\n        eq(schema.cartItems.variantId, variantId)\n      ));\n\n    if (existingItem) {\n      await db.update(schema.cartItems)\n        .set({ quantity: existingItem.quantity + quantity })\n        .where(eq(schema.cartItems.id, existingItem.id));\n    } else {\n      await db.insert(schema.cartItems).values({\n        cartId: cart.id,\n        variantId,\n        quantity\n      });\n    }\n  }\n\n  async updateCartItem(userId: string, variantId: string, quantity: number): Promise<void> {\n    const [cart] = await db.select().from(schema.carts).where(eq(schema.carts.userId, userId));\n\n    if (cart) {\n      await db.update(schema.cartItems)\n        .set({ quantity })\n        .where(and(\n          eq(schema.cartItems.cartId, cart.id),\n          eq(schema.cartItems.variantId, variantId)\n        ));\n    }\n  }\n\n  async removeFromCart(userId: string, variantId: string): Promise<void> {\n    const [cart] = await db.select().from(schema.carts).where(eq(schema.carts.userId, userId));\n\n    if (cart) {\n      await db.delete(schema.cartItems).where(and(\n        eq(schema.cartItems.cartId, cart.id),\n        eq(schema.cartItems.variantId, variantId)\n      ));\n    }\n  }\n\n  async clearCart(userId: string): Promise<void> {\n    const [cart] = await db.select().from(schema.carts).where(eq(schema.carts.userId, userId));\n\n    if (cart) {\n      await db.delete(schema.cartItems).where(eq(schema.cartItems.cartId, cart.id));\n    }\n  }\n\n  // Orders\n  async getOrdersByUserId(userId: string): Promise<Order[]> {\n    return await db.select()\n      .from(schema.orders)\n      .where(eq(schema.orders.userId, userId))\n      .orderBy(desc(schema.orders.createdAt));\n  }\n\n  async getOrdersBySellerId(sellerId: string): Promise<OrderItem[]> {\n    return await db.select()\n      .from(schema.orderItems)\n      .where(eq(schema.orderItems.sellerId, sellerId))\n      .orderBy(desc(schema.orderItems.id));\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [created] = await db.insert(schema.orders).values(order).returning();\n    return created;\n  }\n\n  async updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined> {\n    const [updated] = await db.update(schema.orders)\n      .set(updates)\n      .where(eq(schema.orders.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Reviews\n  async getReviewsByProductId(productId: string): Promise<Review[]> {\n    return await db.select()\n      .from(schema.reviews)\n      .where(eq(schema.reviews.productId, productId))\n      .orderBy(desc(schema.reviews.createdAt));\n  }\n\n  async createReview(review: InsertReview): Promise<Review> {\n    const [created] = await db.insert(schema.reviews).values(review).returning();\n    return created;\n  }\n\n  async createCategory(category: { name: string; description?: string; icon?: string; parentId?: string }): Promise<Category> {\n    const [created] = await db.insert(schema.categories).values(category).returning();\n    return created;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":15280},"AppleAura/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"frontend\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2265},"AppleAura/shared/schema.ts":{"content":"\nimport { sql } from \"drizzle-orm\";\nimport { sqliteTable, text, integer, blob, real } from \"drizzle-orm/sqlite-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = sqliteTable(\"users\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  email: text(\"email\").notNull().unique(),\n  passwordHash: text(\"password_hash\"),\n  name: text(\"name\").notNull(),\n  role: text(\"role\", { enum: ['buyer', 'seller', 'admin'] }).notNull().default('buyer'),\n  createdAt: integer(\"created_at\", { mode: 'timestamp' }).default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\n// Seller profiles\nexport const sellerProfiles = sqliteTable(\"seller_profiles\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  userId: text(\"user_id\").references(() => users.id).notNull().unique(),\n  displayName: text(\"display_name\").notNull(),\n  description: text(\"description\"),\n  status: text(\"status\", { enum: ['pending', 'verified', 'rejected'] }).notNull().default('pending'),\n  createdAt: integer(\"created_at\", { mode: 'timestamp' }).default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\n// Addresses\nexport const addresses = sqliteTable(\"addresses\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  userId: text(\"user_id\").references(() => users.id).notNull(),\n  line1: text(\"line1\").notNull(),\n  line2: text(\"line2\"),\n  city: text(\"city\").notNull(),\n  region: text(\"region\").notNull(),\n  zipCode: text(\"zip_code\").notNull(),\n  country: text(\"country\").notNull().default('Chile'),\n  isDefault: integer(\"is_default\", { mode: 'boolean' }).notNull().default(false),\n});\n\n// Categories\nexport const categories = sqliteTable(\"categories\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  parentId: text(\"parent_id\").references(() => categories.id),\n  icon: text(\"icon\"),\n});\n\n// Products\nexport const products = sqliteTable(\"products\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  sellerId: text(\"seller_id\").references(() => sellerProfiles.id).notNull(),\n  categoryId: text(\"category_id\").references(() => categories.id).notNull(),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  specsJson: text(\"specs_json\", { mode: 'json' }),\n  images: text(\"images\", { mode: 'json' }).$type<string[]>().notNull().default(sql`'[]'`),\n  status: text(\"status\", { enum: ['draft', 'active', 'paused'] }).notNull().default('draft'),\n  createdAt: integer(\"created_at\", { mode: 'timestamp' }).default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\n// Product variants\nexport const productVariants = sqliteTable(\"product_variants\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  productId: text(\"product_id\").references(() => products.id).notNull(),\n  sku: text(\"sku\").notNull().unique(),\n  priceCents: integer(\"price_cents\").notNull(),\n  currency: text(\"currency\").notNull().default('CLP'),\n  attributesJson: text(\"attributes_json\", { mode: 'json' }),\n});\n\n// Inventory\nexport const inventory = sqliteTable(\"inventory\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  variantId: text(\"variant_id\").references(() => productVariants.id).notNull(),\n  stock: integer(\"stock\").notNull().default(0),\n  reserved: integer(\"reserved\").notNull().default(0),\n});\n\n// Carts\nexport const carts = sqliteTable(\"carts\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  userId: text(\"user_id\").references(() => users.id).notNull(),\n  createdAt: integer(\"created_at\", { mode: 'timestamp' }).default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\n// Cart items\nexport const cartItems = sqliteTable(\"cart_items\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  cartId: text(\"cart_id\").references(() => carts.id, { onDelete: 'cascade' }).notNull(),\n  variantId: text(\"variant_id\").references(() => productVariants.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n});\n\n// Orders\nexport const orders = sqliteTable(\"orders\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  userId: text(\"user_id\").references(() => users.id).notNull(),\n  status: text(\"status\", { \n    enum: ['pending', 'paid', 'preparing', 'shipped', 'delivered', 'cancelled'] \n  }).notNull().default('pending'),\n  totalCents: integer(\"total_cents\").notNull(),\n  currency: text(\"currency\").notNull().default('CLP'),\n  shippingAddressId: text(\"shipping_address_id\").references(() => addresses.id),\n  createdAt: integer(\"created_at\", { mode: 'timestamp' }).default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\n// Order items\nexport const orderItems = sqliteTable(\"order_items\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  orderId: text(\"order_id\").references(() => orders.id, { onDelete: 'cascade' }).notNull(),\n  variantId: text(\"variant_id\").references(() => productVariants.id).notNull(),\n  sellerId: text(\"seller_id\").references(() => sellerProfiles.id).notNull(),\n  unitPriceCents: integer(\"unit_price_cents\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n});\n\n// Payments\nexport const payments = sqliteTable(\"payments\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  orderId: text(\"order_id\").references(() => orders.id).notNull().unique(),\n  provider: text(\"provider\", { enum: ['stripe', 'webpay'] }).notNull(),\n  providerRef: text(\"provider_ref\").notNull(),\n  amountCents: integer(\"amount_cents\").notNull(),\n  status: text(\"status\", { \n    enum: ['requires_action', 'succeeded', 'failed', 'refunded'] \n  }).notNull(),\n  paidAt: integer(\"paid_at\", { mode: 'timestamp' }),\n});\n\n// Reviews\nexport const reviews = sqliteTable(\"reviews\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  userId: text(\"user_id\").references(() => users.id).notNull(),\n  productId: text(\"product_id\").references(() => products.id).notNull(),\n  rating: integer(\"rating\").notNull(),\n  comment: text(\"comment\"),\n  createdAt: integer(\"created_at\", { mode: 'timestamp' }).default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\n// Support tickets\nexport const supportTickets = sqliteTable(\"support_tickets\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  userId: text(\"user_id\").references(() => users.id).notNull(),\n  orderId: text(\"order_id\").references(() => orders.id),\n  subject: text(\"subject\").notNull(),\n  status: text(\"status\", { \n    enum: ['open', 'in_progress', 'resolved', 'closed'] \n  }).notNull().default('open'),\n  createdAt: integer(\"created_at\", { mode: 'timestamp' }).default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\n// Insert schemas for validation\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSellerProfileSchema = createInsertSchema(sellerProfiles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  slug: true,\n  createdAt: true,\n});\n\nexport const insertProductVariantSchema = createInsertSchema(productVariants).omit({\n  id: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Type definitions\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\n\nexport type SellerProfile = typeof sellerProfiles.$inferSelect;\nexport type InsertSellerProfile = typeof sellerProfiles.$inferInsert;\n\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = typeof categories.$inferInsert;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = typeof products.$inferInsert;\n\nexport type ProductVariant = typeof productVariants.$inferSelect;\nexport type InsertProductVariant = typeof productVariants.$inferInsert;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = typeof orders.$inferInsert;\n\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = typeof orderItems.$inferInsert;\n\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = typeof reviews.$inferInsert;\n\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = typeof cartItems.$inferInsert;\n\nexport type Address = typeof addresses.$inferSelect;\nexport type InsertAddress = typeof addresses.$inferInsert;\n","size_bytes":8558},"AppleAura/client/src/App.tsx":{"content":"\nimport { Route, Switch } from \"wouter\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ThemeProvider } from \"./components/theme-provider\";\nimport { Toaster } from \"./components/ui/toaster\";\nimport { Navigation } from \"./components/navigation\";\nimport { AuthProvider } from \"./hooks/use-auth\";\nimport { CartProvider } from \"./hooks/use-cart\";\n\nimport Home from \"./pages/home\";\nimport Auth from \"./pages/auth\";\nimport ProductDetail from \"./pages/product-detail\";\nimport Cart from \"./pages/cart\";\nimport SellerDashboard from \"./pages/seller-dashboard\";\nimport AdminDashboard from \"./pages/admin-dashboard\";\nimport NotFound from \"./pages/not-found\";\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      retry: 1,\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\" storageKey=\"appleaura-theme\">\n        <AuthProvider>\n          <CartProvider>\n            <div className=\"min-h-screen bg-background\">\n              <Navigation />\n              <main className=\"pb-8\">\n                <Switch>\n                  <Route path=\"/\" component={Home} />\n                  <Route path=\"/auth\" component={Auth} />\n                  <Route path=\"/products/:slug\" component={ProductDetail} />\n                  <Route path=\"/cart\" component={Cart} />\n                  <Route path=\"/seller/dashboard\" component={SellerDashboard} />\n                  <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n                  <Route component={NotFound} />\n                </Switch>\n              </main>\n              <Toaster />\n            </div>\n          </CartProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1855},"AppleAura/client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(211, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(211, 100%, 50%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214.2857, 31.7949%, 91.1765%);\n  --input: hsl(210, 16.6667%, 97.6471%);\n  --ring: hsl(211, 100%, 50%);\n  \n  /* Apple colors */\n  --apple-blue: hsl(211, 100%, 50%);\n  --apple-blue-dark: hsl(212, 100%, 52%);\n  --apple-green: hsl(142, 71%, 45%);\n  --apple-green-dark: hsl(142, 85%, 48%);\n  --apple-red: hsl(4, 100%, 59%);\n  --apple-red-dark: hsl(4, 100%, 63%);\n  --tech-blue: hsl(194, 100%, 50%);\n  --tech-green: hsl(82, 100%, 56%);\n  \n  /* Apple grays */\n  --apple-gray-1: hsl(240, 4%, 56%);\n  --apple-gray-2: hsl(240, 5%, 68%);\n  --apple-gray-3: hsl(240, 5%, 78%);\n  --apple-gray-4: hsl(240, 5%, 82%);\n  --apple-gray-5: hsl(240, 4%, 90%);\n  --apple-gray-6: hsl(240, 5%, 95%);\n  \n  /* Apple dark colors */\n  --apple-dark-1: hsl(240, 6%, 11%);\n  --apple-dark-2: hsl(240, 5%, 17%);\n  --apple-dark-3: hsl(240, 4%, 23%);\n  --apple-dark-4: hsl(240, 4%, 29%);\n  --apple-dark-5: hsl(240, 4%, 40%);\n  --apple-dark-6: hsl(240, 4%, 56%);\n  \n  --font-sans: 'Inter', 'SF Pro Display', '-apple-system', 'BlinkMacSystemFont', 'Helvetica Neue', 'Arial', sans-serif;\n  --radius: 1rem;\n}\n\n.dark {\n  --background: hsl(240, 6%, 11%);\n  --foreground: hsl(240, 5%, 91%);\n  --card: hsl(240, 5%, 17%);\n  --card-foreground: hsl(240, 5%, 85%);\n  --popover: hsl(240, 6%, 11%);\n  --popover-foreground: hsl(240, 5%, 91%);\n  --primary: hsl(212, 100%, 52%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 5%, 95%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(240, 4%, 15%);\n  --muted-foreground: hsl(240, 4%, 46%);\n  --accent: hsl(205, 70%, 8%);\n  --accent-foreground: hsl(212, 100%, 52%);\n  --destructive: hsl(4, 100%, 59%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(240, 4%, 15%);\n  --input: hsl(240, 5%, 18%);\n  --ring: hsl(211, 100%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n}\n\n@layer components {\n  .glass-effect {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(20px);\n    -webkit-backdrop-filter: blur(20px);\n  }\n  \n  .dark .glass-effect {\n    background: rgba(0, 0, 0, 0.2);\n  }\n  \n  .gradient-mesh {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    opacity: 0.1;\n  }\n  \n  .hover-lift {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  .hover-lift:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);\n  }\n  \n  .dark .hover-lift:hover {\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);\n  }\n  \n  .button-haptic {\n    transition: all 0.15s ease;\n  }\n  \n  .button-haptic:active {\n    transform: scale(0.98);\n  }\n  \n  .product-card-hover {\n    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  .product-card-hover:hover {\n    transform: translateY(-12px) scale(1.02);\n    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);\n  }\n  \n  .dark .product-card-hover:hover {\n    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);\n  }\n\n  /* Typography Scale */\n  .text-display-large {\n    font-size: 2.75rem;\n    line-height: 3.25rem;\n    letter-spacing: -0.02em;\n    font-weight: 700;\n  }\n  \n  .text-display {\n    font-size: 2.25rem;\n    line-height: 2.75rem;\n    letter-spacing: -0.02em;\n    font-weight: 600;\n  }\n  \n  .text-title-1 {\n    font-size: 1.75rem;\n    line-height: 2.25rem;\n    letter-spacing: -0.01em;\n    font-weight: 600;\n  }\n  \n  .text-title-2 {\n    font-size: 1.375rem;\n    line-height: 1.75rem;\n    letter-spacing: -0.01em;\n    font-weight: 600;\n  }\n  \n  .text-title-3 {\n    font-size: 1.25rem;\n    line-height: 1.625rem;\n    letter-spacing: -0.01em;\n    font-weight: 600;\n  }\n  \n  .text-headline {\n    font-size: 1.063rem;\n    line-height: 1.375rem;\n    letter-spacing: 0em;\n    font-weight: 600;\n  }\n  \n  .text-subheadline {\n    font-size: 0.938rem;\n    line-height: 1.25rem;\n    letter-spacing: 0em;\n    font-weight: 400;\n  }\n  \n  .text-footnote {\n    font-size: 0.813rem;\n    line-height: 1.125rem;\n    letter-spacing: 0em;\n    font-weight: 400;\n  }\n  \n  .text-caption-1 {\n    font-size: 0.75rem;\n    line-height: 1rem;\n    letter-spacing: 0em;\n    font-weight: 400;\n  }\n  \n  .text-caption-2 {\n    font-size: 0.688rem;\n    line-height: 0.875rem;\n    letter-spacing: 0em;\n    font-weight: 400;\n  }\n}\n\n@layer utilities {\n  /* Animations */\n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n  \n  .animate-scale-in {\n    animation: scaleIn 0.2s ease-out;\n  }\n  \n  .animate-bounce-subtle {\n    animation: bounceSubtle 0.6s ease-out;\n  }\n  \n  .animate-glow-pulse {\n    animation: glowPulse 2s ease-in-out infinite;\n  }\n  \n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  /* Custom shadows */\n  .shadow-apple {\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n  }\n  \n  .shadow-apple-lg {\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  }\n  \n  .shadow-apple-xl {\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n  \n  .shadow-float {\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);\n  }\n  \n  .shadow-glow-blue {\n    box-shadow: 0 0 20px rgba(0, 122, 255, 0.3);\n  }\n  \n  .shadow-glow-green {\n    box-shadow: 0 0 20px rgba(52, 199, 89, 0.3);\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n  \n  ::-webkit-scrollbar-track {\n    background: rgba(0, 0, 0, 0.1);\n  }\n  \n  ::-webkit-scrollbar-thumb {\n    background: rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n  }\n  \n  ::-webkit-scrollbar-thumb:hover {\n    background: rgba(0, 0, 0, 0.3);\n  }\n  \n  .dark ::-webkit-scrollbar-track {\n    background: rgba(255, 255, 255, 0.1);\n  }\n  \n  .dark ::-webkit-scrollbar-thumb {\n    background: rgba(255, 255, 255, 0.2);\n  }\n  \n  .dark ::-webkit-scrollbar-thumb:hover {\n    background: rgba(255, 255, 255, 0.3);\n  }\n}\n\n@keyframes fadeIn {\n  0% { opacity: 0; }\n  100% { opacity: 1; }\n}\n\n@keyframes slideUp {\n  0% { transform: translateY(20px); opacity: 0; }\n  100% { transform: translateY(0); opacity: 1; }\n}\n\n@keyframes scaleIn {\n  0% { transform: scale(0.95); opacity: 0; }\n  100% { transform: scale(1); opacity: 1; }\n}\n\n@keyframes bounceSubtle {\n  0%, 100% { transform: translateY(0); }\n  50% { transform: translateY(-4px); }\n}\n\n@keyframes glowPulse {\n  0%, 100% { opacity: 0.5; }\n  50% { opacity: 0.8; }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n","size_bytes":7461},"AppleAura/client/src/main.tsx":{"content":"\nimport React from \"react\";\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst container = document.getElementById(\"root\");\nif (!container) throw new Error(\"Root element not found\");\n\nconst root = createRoot(container);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n","size_bytes":366},"AppleAura/client/src/components/cart-modal.tsx":{"content":"import { X, Minus, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { formatPrice } from \"@/lib/currency\";\n\ninterface CartModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function CartModal({ isOpen, onClose }: CartModalProps) {\n  const { items, updateQuantity, removeItem, isLoading } = useCart();\n\n  // Calculate totals (this would need product data to be complete)\n  const subtotal = 0; // Calculate from items with product prices\n  const shipping = 0; // Free shipping logic\n  const total = subtotal + shipping;\n\n  if (isLoading) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl\">\n          <div className=\"flex items-center justify-center p-8\">\n            <div className=\"w-8 h-8 border-2 border-apple-blue border-t-transparent rounded-full animate-spin\" />\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"text-title-2 font-semibold\">Carrito de Compras</DialogTitle>\n        </DialogHeader>\n        \n        {items.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <div className=\"w-16 h-16 bg-apple-gray-5 dark:bg-apple-dark-3 rounded-full flex items-center justify-center mb-4\">\n              <X className=\"w-8 h-8 text-apple-gray-1\" />\n            </div>\n            <h3 className=\"text-headline font-semibold mb-2\">Tu carrito est√° vac√≠o</h3>\n            <p className=\"text-body text-apple-gray-1 mb-6\">\n              A√±ade algunos productos incre√≠bles a tu carrito\n            </p>\n            <Button onClick={onClose}>\n              Seguir Comprando\n            </Button>\n          </div>\n        ) : (\n          <>\n            {/* Cart Items */}\n            <div className=\"max-h-96 overflow-y-auto space-y-4\">\n              {items.map((item) => (\n                <div \n                  key={item.id}\n                  className=\"flex items-center space-x-4 p-4 bg-apple-gray-6 dark:bg-apple-dark-3 rounded-xl\"\n                >\n                  {/* Product Image Placeholder */}\n                  <div className=\"w-16 h-16 bg-apple-gray-4 dark:bg-apple-dark-4 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-caption-1 text-apple-gray-1\">IMG</span>\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <h3 className=\"text-headline font-semibold text-gray-900 dark:text-white\">\n                      Producto {item.variantId.slice(0, 8)}\n                    </h3>\n                    <p className=\"text-footnote text-apple-gray-1\">\n                      SKU: {item.variantId}\n                    </p>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-3\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => updateQuantity(item.variantId, Math.max(0, item.quantity - 1))}\n                      className=\"h-8 w-8\"\n                    >\n                      <Minus className=\"w-4 h-4\" />\n                    </Button>\n                    <span className=\"text-body font-medium min-w-[2rem] text-center\">\n                      {item.quantity}\n                    </span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => updateQuantity(item.variantId, item.quantity + 1)}\n                      className=\"h-8 w-8\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className=\"text-headline font-semibold text-apple-blue dark:text-apple-blue-dark\">\n                      {formatPrice(0)} {/* Would calculate from variant price */}\n                    </p>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeItem(item.variantId)}\n                      className=\"text-apple-red hover:text-apple-red-dark text-footnote\"\n                    >\n                      Eliminar\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            {/* Summary */}\n            <div className=\"border-t border-apple-gray-5 dark:border-apple-dark-3 pt-6\">\n              <div className=\"space-y-2 mb-4\">\n                <div className=\"flex justify-between text-body\">\n                  <span className=\"text-apple-gray-1\">Subtotal</span>\n                  <span>{formatPrice(subtotal)}</span>\n                </div>\n                <div className=\"flex justify-between text-body\">\n                  <span className=\"text-apple-gray-1\">Env√≠o</span>\n                  <span className=\"text-apple-green font-medium\">Gratis</span>\n                </div>\n                <div className=\"flex justify-between text-title-2 font-semibold border-t border-apple-gray-5 dark:border-apple-dark-3 pt-2\">\n                  <span>Total</span>\n                  <span>{formatPrice(total)}</span>\n                </div>\n              </div>\n              <Button \n                className=\"w-full button-haptic bg-apple-blue dark:bg-apple-blue-dark text-white hover:bg-blue-600 dark:hover:bg-blue-500 shadow-apple-lg transition-all duration-200\"\n                onClick={onClose}\n              >\n                Proceder al Pago\n              </Button>\n            </div>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6005},"AppleAura/client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  Zap, \n  Search, \n  ShoppingCart, \n  Sun, \n  Moon, \n  User,\n  Menu,\n  X,\n  Package,\n  Settings\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { SearchBar } from \"./search-bar\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function Navigation() {\n  const [, setLocation] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { theme, setTheme } = useTheme();\n  const { user, logout, isAuthenticated } = useAuth();\n  const { itemCount } = useCart();\n\n  const handleSearch = (query: string) => {\n    if (query.trim()) {\n      setLocation(`/?search=${encodeURIComponent(query)}`);\n    }\n  };\n\n  const handleLogout = async () => {\n    await logout();\n    setLocation(\"/\");\n  };\n\n  const toggleTheme = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  const UserMenu = () => (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          className=\"flex items-center space-x-2 p-2 rounded-lg hover:bg-apple-gray-6 dark:hover:bg-apple-dark-2 transition-colors\"\n        >\n          <div className=\"w-8 h-8 bg-gradient-to-br from-apple-blue to-apple-green rounded-full flex items-center justify-center\">\n            <span className=\"text-caption-1 font-semibold text-white\">\n              {user?.name[0] || \"U\"}\n            </span>\n          </div>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-56\">\n        <div className=\"px-2 py-1.5\">\n          <p className=\"text-sm font-medium\">{user?.name}</p>\n          <p className=\"text-xs text-muted-foreground\">{user?.email}</p>\n        </div>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem asChild>\n          <Link href=\"/orders\" className=\"flex items-center space-x-2\">\n            <Package className=\"w-4 h-4\" />\n            <span>Mis √ìrdenes</span>\n          </Link>\n        </DropdownMenuItem>\n        {user?.role === \"seller\" && (\n          <DropdownMenuItem asChild>\n            <Link href=\"/seller\" className=\"flex items-center space-x-2\">\n              <Settings className=\"w-4 h-4\" />\n              <span>Panel de Vendedor</span>\n            </Link>\n          </DropdownMenuItem>\n        )}\n        {user?.role === \"admin\" && (\n          <DropdownMenuItem asChild>\n            <Link href=\"/admin\" className=\"flex items-center space-x-2\">\n              <Settings className=\"w-4 h-4\" />\n              <span>Panel Admin</span>\n            </Link>\n          </DropdownMenuItem>\n        )}\n        <DropdownMenuSeparator />\n        <DropdownMenuItem onClick={handleLogout} className=\"text-red-600\">\n          Cerrar Sesi√≥n\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n\n  return (\n    <nav className=\"sticky top-0 z-50 glass-effect border-b border-gray-200 dark:border-gray-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-apple-blue to-tech-blue rounded-lg flex items-center justify-center\">\n              <Zap className=\"w-5 h-5 text-white\" />\n            </div>\n            <span className=\"text-title-2 font-semibold hidden sm:block\">\n              Silicon Trail\n            </span>\n          </Link>\n          \n          {/* Search Bar - Desktop */}\n          <div className=\"hidden md:block flex-1 max-w-2xl mx-8\">\n            <SearchBar onSearch={handleSearch} />\n          </div>\n          \n          {/* Navigation Items - Desktop */}\n          <div className=\"hidden md:flex items-center space-x-6\">\n            <Link href=\"/categories\" className=\"text-body text-gray-700 dark:text-gray-300 hover:text-apple-blue dark:hover:text-apple-blue-dark transition-colors\">\n              Categor√≠as\n            </Link>\n            <Link href=\"/offers\" className=\"text-body text-gray-700 dark:text-gray-300 hover:text-apple-blue dark:hover:text-apple-blue-dark transition-colors\">\n              Ofertas\n            </Link>\n            \n            {/* Cart */}\n            <Link href=\"/cart\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n                <ShoppingCart className=\"h-6 w-6\" />\n                {itemCount > 0 && (\n                  <Badge className=\"absolute -top-1 -right-1 h-4 w-4 bg-apple-red dark:bg-apple-red-dark text-white text-caption-2 rounded-full flex items-center justify-center\">\n                    {itemCount}\n                  </Badge>\n                )}\n              </Button>\n            </Link>\n            \n            {/* Theme Toggle */}\n            <Button onClick={toggleTheme} variant=\"ghost\" size=\"icon\">\n              <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n              <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n            </Button>\n            \n            {/* User Menu or Auth */}\n            {isAuthenticated ? (\n              <UserMenu />\n            ) : (\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"ghost\" asChild>\n                  <Link href=\"/auth\">Iniciar Sesi√≥n</Link>\n                </Button>\n                <Button asChild>\n                  <Link href=\"/auth\">Registrarse</Link>\n                </Button>\n              </div>\n            )}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <div className=\"md:hidden flex items-center space-x-2\">\n            <Link href=\"/cart\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n                <ShoppingCart className=\"h-6 w-6\" />\n                {itemCount > 0 && (\n                  <Badge className=\"absolute -top-1 -right-1 h-4 w-4 bg-apple-red text-white text-caption-2 rounded-full flex items-center justify-center\">\n                    {itemCount}\n                  </Badge>\n                )}\n              </Button>\n            </Link>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            >\n              {isMobileMenuOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Search Bar */}\n        <div className=\"md:hidden pb-4\">\n          <SearchBar onSearch={handleSearch} />\n        </div>\n\n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden py-4 border-t border-gray-200 dark:border-gray-800\">\n            <div className=\"flex flex-col space-y-4\">\n              <Link \n                href=\"/categories\" \n                className=\"text-body text-gray-700 dark:text-gray-300 hover:text-apple-blue transition-colors\"\n                onClick={() => setIsMobileMenuOpen(false)}\n              >\n                Categor√≠as\n              </Link>\n              <Link \n                href=\"/offers\" \n                className=\"text-body text-gray-700 dark:text-gray-300 hover:text-apple-blue transition-colors\"\n                onClick={() => setIsMobileMenuOpen(false)}\n              >\n                Ofertas\n              </Link>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-body text-gray-700 dark:text-gray-300\">Tema</span>\n                <Button onClick={toggleTheme} variant=\"ghost\" size=\"icon\">\n                  <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n                  <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n                </Button>\n              </div>\n\n              {isAuthenticated ? (\n                <div className=\"pt-4 border-t border-gray-200 dark:border-gray-800\">\n                  <div className=\"flex items-center space-x-2 mb-4\">\n                    <div className=\"w-8 h-8 bg-gradient-to-br from-apple-blue to-apple-green rounded-full flex items-center justify-center\">\n                      <span className=\"text-caption-1 font-semibold text-white\">\n                        {user?.name[0] || \"U\"}\n                      </span>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium\">{user?.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">{user?.email}</p>\n                    </div>\n                  </div>\n                  <Link \n                    href=\"/orders\" \n                    className=\"block text-body text-gray-700 dark:text-gray-300 hover:text-apple-blue transition-colors mb-2\"\n                    onClick={() => setIsMobileMenuOpen(false)}\n                  >\n                    Mis √ìrdenes\n                  </Link>\n                  {user?.role === \"seller\" && (\n                    <Link \n                      href=\"/seller\" \n                      className=\"block text-body text-gray-700 dark:text-gray-300 hover:text-apple-blue transition-colors mb-2\"\n                      onClick={() => setIsMobileMenuOpen(false)}\n                    >\n                      Panel de Vendedor\n                    </Link>\n                  )}\n                  {user?.role === \"admin\" && (\n                    <Link \n                      href=\"/admin\" \n                      className=\"block text-body text-gray-700 dark:text-gray-300 hover:text-apple-blue transition-colors mb-2\"\n                      onClick={() => setIsMobileMenuOpen(false)}\n                    >\n                      Panel Admin\n                    </Link>\n                  )}\n                  <Button \n                    onClick={handleLogout} \n                    variant=\"ghost\" \n                    className=\"text-red-600 p-0\"\n                  >\n                    Cerrar Sesi√≥n\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"pt-4 border-t border-gray-200 dark:border-gray-800 space-y-2\">\n                  <Button variant=\"ghost\" asChild className=\"w-full justify-start\">\n                    <Link href=\"/auth\" onClick={() => setIsMobileMenuOpen(false)}>\n                      Iniciar Sesi√≥n\n                    </Link>\n                  </Button>\n                  <Button asChild className=\"w-full\">\n                    <Link href=\"/auth\" onClick={() => setIsMobileMenuOpen(false)}>\n                      Registrarse\n                    </Link>\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":11129},"AppleAura/client/src/components/product-card.tsx":{"content":"import { useState } from \"react\";\nimport { Heart, Eye, ShoppingCart, Star, CheckCircle, MapPin } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { formatPrice } from \"@/lib/currency\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ProductCardProps {\n  product: {\n    id: string;\n    title: string;\n    images: string[];\n    variants?: Array<{\n      id: string;\n      priceCents: number;\n      currency: string;\n    }>;\n    seller?: {\n      displayName: string;\n      location?: string;\n    };\n    rating?: number;\n    reviewCount?: number;\n    badges?: string[];\n    stock?: number;\n    freeShipping?: boolean;\n    trending?: boolean;\n  };\n  onView?: (productId: string) => void;\n}\n\nexport function ProductCard({ product, onView }: ProductCardProps) {\n  const [isLiked, setIsLiked] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n  const { addToCart } = useCart();\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  const defaultVariant = product.variants?.[0];\n  const price = defaultVariant ? formatPrice(defaultVariant.priceCents, defaultVariant.currency) : \"\";\n  \n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`w-4 h-4 ${\n          i < rating ? \"text-yellow-400 fill-current\" : \"text-apple-gray-3\"\n        }`}\n      />\n    ));\n  };\n\n  const handleAddToCart = async (e: React.MouseEvent) => {\n    e.stopPropagation();\n    \n    if (!isAuthenticated) {\n      toast({\n        title: \"Inicia sesi√≥n\",\n        description: \"Debes iniciar sesi√≥n para a√±adir productos al carrito\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!defaultVariant) {\n      toast({\n        title: \"Error\",\n        description: \"Este producto no est√° disponible\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsAdding(true);\n    try {\n      await addToCart(defaultVariant.id, 1);\n      toast({\n        title: \"¬°A√±adido al carrito!\",\n        description: `${product.title} se a√±adi√≥ a tu carrito`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo a√±adir el producto al carrito\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsAdding(false);\n    }\n  };\n\n  const handleView = () => {\n    onView?.(product.id);\n  };\n\n  const handleToggleLike = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsLiked(!isLiked);\n  };\n\n  return (\n    <div \n      className=\"product-card-hover bg-white dark:bg-apple-dark-2 rounded-2xl overflow-hidden shadow-apple hover:shadow-float border border-apple-gray-5 dark:border-apple-dark-3 cursor-pointer\"\n      onClick={handleView}\n    >\n      <div className=\"relative\">\n        <img \n          src={product.images[0] || \"https://images.unsplash.com/photo-1541807084-5c52b6b3adef?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"} \n          alt={product.title}\n          className=\"w-full h-48 object-cover\"\n        />\n        \n        {/* Badges */}\n        <div className=\"absolute top-3 left-3 flex flex-col gap-2\">\n          {product.trending && (\n            <Badge className=\"bg-apple-red text-white text-caption-1 font-semibold animate-glow-pulse\">\n              üî• Trending\n            </Badge>\n          )}\n          {product.stock && product.stock < 10 && (\n            <Badge className=\"bg-yellow-500 text-white text-caption-1 font-semibold\">\n              ‚ö° Stock Bajo\n            </Badge>\n          )}\n          {product.freeShipping && (\n            <Badge className=\"bg-apple-green text-white text-caption-1 font-semibold\">\n              üöö Gratis\n            </Badge>\n          )}\n        </div>\n\n        <button\n          onClick={handleToggleLike}\n          className=\"absolute top-3 right-3 p-2 bg-white bg-opacity-90 rounded-full shadow-apple hover:bg-opacity-100 transition-all duration-200\"\n        >\n          <Heart \n            className={`w-4 h-4 ${\n              isLiked \n                ? \"text-red-500 fill-current\" \n                : \"text-gray-600\"\n            }`} \n          />\n        </button>\n\n        {/* Stock Progress Bar */}\n        {product.stock && product.stock < 10 && (\n          <div className=\"absolute bottom-3 left-3 right-3\">\n            <div className=\"bg-white bg-opacity-90 rounded-full p-1\">\n              <div \n                className=\"bg-apple-red h-1 rounded-full\" \n                style={{ width: `${Math.min((product.stock / 20) * 100, 100)}%` }}\n              />\n            </div>\n            <span className=\"text-caption-2 text-white font-medium bg-black bg-opacity-50 px-2 py-1 rounded-full mt-1 inline-block\">\n              Solo quedan {product.stock}\n            </span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"p-4\">\n        <h3 className=\"text-headline font-semibold text-gray-900 dark:text-white mb-2 line-clamp-2\">\n          {product.title}\n        </h3>\n        \n        <div className=\"flex items-center justify-between mb-3\">\n          <span className=\"text-title-2 font-bold text-apple-blue dark:text-apple-blue-dark\">\n            {price}\n          </span>\n        </div>\n        \n        {/* Rating */}\n        {product.rating && (\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <div className=\"flex items-center\">\n              {renderStars(product.rating)}\n            </div>\n            <span className=\"text-footnote text-apple-gray-1\">\n              ({product.rating}) ¬∑ {product.reviewCount || 0} rese√±as\n            </span>\n          </div>\n        )}\n        \n        {/* Seller Info */}\n        {product.seller && (\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <div className=\"w-6 h-6 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center\">\n              <span className=\"text-caption-2 font-bold text-white\">\n                {product.seller.displayName[0]}\n              </span>\n            </div>\n            <span className=\"text-footnote text-apple-gray-1\">\n              {product.seller.displayName}\n            </span>\n            <CheckCircle className=\"w-4 h-4 text-apple-green\" />\n            {product.seller.location && (\n              <>\n                <MapPin className=\"w-3 h-3 text-apple-gray-1\" />\n                <span className=\"text-caption-2 text-apple-gray-1\">\n                  {product.seller.location}\n                </span>\n              </>\n            )}\n          </div>\n        )}\n        \n        {/* Actions */}\n        <div className=\"flex space-x-2\">\n          <Button \n            onClick={handleAddToCart}\n            disabled={isAdding || !defaultVariant}\n            className=\"button-haptic flex-1 bg-apple-blue dark:bg-apple-blue-dark text-white hover:bg-blue-600 dark:hover:bg-blue-500 transition-all duration-200\"\n          >\n            {isAdding ? (\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                <span>A√±adiendo...</span>\n              </div>\n            ) : (\n              <>\n                <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                A√±adir al Carrito\n              </>\n            )}\n          </Button>\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              handleView();\n            }}\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"button-haptic bg-apple-gray-6 dark:bg-apple-dark-3 hover:bg-apple-gray-5 dark:hover:bg-apple-dark-4 transition-all duration-200\"\n          >\n            <Eye className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7928},"AppleAura/client/src/components/search-bar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Search, Command } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface SearchBarProps {\n  onSearch: (query: string) => void;\n  placeholder?: string;\n  className?: string;\n}\n\nexport function SearchBar({ onSearch, placeholder = \"Buscar productos...\", className = \"\" }: SearchBarProps) {\n  const [query, setQuery] = useState(\"\");\n\n  useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === \"k\") {\n        e.preventDefault();\n        const searchInput = document.querySelector('input[type=\"text\"]') as HTMLInputElement;\n        searchInput?.focus();\n      }\n    };\n\n    document.addEventListener(\"keydown\", handler);\n    return () => document.removeEventListener(\"keydown\", handler);\n  }, []);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch(query);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={`relative ${className}`}>\n      <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n        <Search className=\"h-5 w-5 text-apple-gray-1\" />\n      </div>\n      <Input\n        type=\"text\"\n        placeholder={placeholder}\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        className=\"block w-full pl-10 pr-10 py-2.5 bg-apple-gray-6 dark:bg-apple-dark-2 border border-transparent rounded-xl focus:outline-none focus:ring-2 focus:ring-apple-blue focus:border-apple-blue transition-all duration-200\"\n      />\n      <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center\">\n        <kbd className=\"inline-flex items-center px-2 py-1 bg-white dark:bg-apple-dark-3 border border-apple-gray-3 dark:border-apple-dark-4 rounded text-caption-1 font-sans font-medium text-apple-gray-1\">\n          <Command className=\"w-3 h-3 mr-1\" />K\n        </kbd>\n      </div>\n    </form>\n  );\n}\n","size_bytes":1925},"AppleAura/client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"silicon-trail-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1611},"AppleAura/client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\nimport { User } from \"@shared/schema\";\nimport { authService } from \"@/lib/auth\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, name: string) => Promise<void>;\n  logout: () => Promise<void>;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        const currentUser = await authService.getCurrentUser();\n        setUser(currentUser);\n      } catch (error) {\n        console.error(\"Failed to initialize auth:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    const { user } = await authService.login(email, password);\n    setUser(user);\n  };\n\n  const register = async (email: string, password: string, name: string) => {\n    const { user } = await authService.register(email, password, name);\n    setUser(user);\n  };\n\n  const logout = async () => {\n    await authService.logout();\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading,\n        login,\n        register,\n        logout,\n        isAuthenticated: !!user,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":1862},"AppleAura/client/src/hooks/use-cart.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { CartItem } from \"@shared/schema\";\nimport { authService } from \"@/lib/auth\";\nimport { useAuth } from \"./use-auth\";\n\ninterface CartContextType {\n  items: CartItem[];\n  itemCount: number;\n  isLoading: boolean;\n  addToCart: (variantId: string, quantity: number) => Promise<void>;\n  updateQuantity: (variantId: string, quantity: number) => Promise<void>;\n  removeItem: (variantId: string) => Promise<void>;\n  clearCart: () => Promise<void>;\n  refetch: () => Promise<void>;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport function CartProvider({ children }: { children: React.ReactNode }) {\n  const [items, setItems] = useState<CartItem[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { isAuthenticated } = useAuth();\n\n  const fetchCart = async () => {\n    if (!isAuthenticated) {\n      setItems([]);\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/cart\", {\n        headers: authService.getAuthHeaders(),\n      });\n\n      if (response.ok) {\n        const cartItems = await response.json();\n        setItems(cartItems);\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch cart:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchCart();\n  }, [isAuthenticated]);\n\n  const addToCart = async (variantId: string, quantity: number) => {\n    try {\n      const response = await fetch(\"/api/cart/add\", {\n        method: \"POST\",\n        headers: authService.getAuthHeaders(),\n        body: JSON.stringify({ variantId, quantity }),\n      });\n\n      if (response.ok) {\n        await fetchCart();\n      }\n    } catch (error) {\n      console.error(\"Failed to add to cart:\", error);\n      throw error;\n    }\n  };\n\n  const updateQuantity = async (variantId: string, quantity: number) => {\n    try {\n      const response = await fetch(\"/api/cart/update\", {\n        method: \"PUT\",\n        headers: authService.getAuthHeaders(),\n        body: JSON.stringify({ variantId, quantity }),\n      });\n\n      if (response.ok) {\n        await fetchCart();\n      }\n    } catch (error) {\n      console.error(\"Failed to update cart:\", error);\n      throw error;\n    }\n  };\n\n  const removeItem = async (variantId: string) => {\n    try {\n      const response = await fetch(`/api/cart/remove/${variantId}`, {\n        method: \"DELETE\",\n        headers: authService.getAuthHeaders(),\n      });\n\n      if (response.ok) {\n        await fetchCart();\n      }\n    } catch (error) {\n      console.error(\"Failed to remove from cart:\", error);\n      throw error;\n    }\n  };\n\n  const clearCart = async () => {\n    try {\n      const response = await fetch(\"/api/cart/clear\", {\n        method: \"DELETE\",\n        headers: authService.getAuthHeaders(),\n      });\n\n      if (response.ok) {\n        setItems([]);\n      }\n    } catch (error) {\n      console.error(\"Failed to clear cart:\", error);\n      throw error;\n    }\n  };\n\n  const itemCount = items.reduce((total, item) => total + item.quantity, 0);\n\n  return (\n    <CartContext.Provider\n      value={{\n        items,\n        itemCount,\n        isLoading,\n        addToCart,\n        updateQuantity,\n        removeItem,\n        clearCart,\n        refetch: fetchCart,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n}","size_bytes":3576},"AppleAura/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"AppleAura/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"AppleAura/client/src/lib/auth.ts":{"content":"import { User } from \"@shared/schema\";\n\nconst API_BASE = \"/api\";\n\ninterface AuthResponse {\n  user: User;\n  token: string;\n}\n\nclass AuthService {\n  private token: string | null = null;\n  private user: User | null = null;\n\n  constructor() {\n    this.token = localStorage.getItem(\"auth-token\");\n    const savedUser = localStorage.getItem(\"auth-user\");\n    if (savedUser) {\n      try {\n        this.user = JSON.parse(savedUser);\n      } catch {\n        localStorage.removeItem(\"auth-user\");\n      }\n    }\n  }\n\n  async register(email: string, password: string, name: string): Promise<AuthResponse> {\n    const response = await fetch(`${API_BASE}/auth/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email,\n        passwordHash: password,\n        name,\n      }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || \"Registration failed\");\n    }\n\n    const data: AuthResponse = await response.json();\n    this.setAuth(data);\n    return data;\n  }\n\n  async login(email: string, password: string): Promise<AuthResponse> {\n    const response = await fetch(`${API_BASE}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || \"Login failed\");\n    }\n\n    const data: AuthResponse = await response.json();\n    this.setAuth(data);\n    return data;\n  }\n\n  async logout(): Promise<void> {\n    this.token = null;\n    this.user = null;\n    localStorage.removeItem(\"auth-token\");\n    localStorage.removeItem(\"auth-user\");\n  }\n\n  async getCurrentUser(): Promise<User | null> {\n    if (!this.token) return null;\n\n    try {\n      const response = await fetch(`${API_BASE}/auth/me`, {\n        headers: {\n          Authorization: `Bearer ${this.token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          this.logout();\n          return null;\n        }\n        throw new Error(\"Failed to fetch user\");\n      }\n\n      const data = await response.json();\n      this.user = data.user;\n      localStorage.setItem(\"auth-user\", JSON.stringify(this.user));\n      return this.user;\n    } catch (error) {\n      console.error(\"Error fetching current user:\", error);\n      this.logout();\n      return null;\n    }\n  }\n\n  private setAuth(data: AuthResponse): void {\n    this.token = data.token;\n    this.user = data.user;\n    localStorage.setItem(\"auth-token\", this.token);\n    localStorage.setItem(\"auth-user\", JSON.stringify(this.user));\n  }\n\n  getToken(): string | null {\n    return this.token;\n  }\n\n  getUser(): User | null {\n    return this.user;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.token && !!this.user;\n  }\n\n  getAuthHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (this.token) {\n      headers.Authorization = `Bearer ${this.token}`;\n    }\n\n    return headers;\n  }\n}\n\nexport const authService = new AuthService();\n","size_bytes":3210},"AppleAura/client/src/lib/currency.ts":{"content":"export function formatPrice(cents: number, currency = \"CLP\"): string {\n  const amount = cents / 100;\n  \n  if (currency === \"CLP\") {\n    return new Intl.NumberFormat(\"es-CL\", {\n      style: \"currency\",\n      currency: \"CLP\",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  }\n  \n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency,\n  }).format(amount);\n}\n\nexport function parsePrice(priceString: string): number {\n  // Remove all non-numeric characters except decimal points\n  const numericString = priceString.replace(/[^\\d.,]/g, \"\");\n  \n  // Convert to number and then to cents\n  const amount = parseFloat(numericString.replace(\",\", \".\"));\n  return Math.round(amount * 100);\n}\n","size_bytes":744},"AppleAura/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"AppleAura/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"AppleAura/client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Users, ShoppingBag, DollarSign, BarChart3, Eye, CheckCircle, XCircle } from \"lucide-react\";\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const [stats] = useState({\n    totalUsers: 1245,\n    totalOrders: 3856,\n    totalRevenue: 892450000,\n    totalProducts: 156\n  });\n\n  const [recentOrders] = useState([\n    { id: \"ORD-001\", user: \"Mar√≠a Gonz√°lez\", total: 1299990, status: \"delivered\", date: \"2024-01-15\" },\n    { id: \"ORD-002\", user: \"Carlos Mendoza\", total: 2199990, status: \"shipped\", date: \"2024-01-14\" },\n    { id: \"ORD-003\", user: \"Ana Rodr√≠guez\", total: 449990, status: \"pending\", date: \"2024-01-14\" },\n  ]);\n\n  const [pendingSellers] = useState([\n    { id: \"1\", name: \"TechStore Pro\", email: \"techstore@email.com\", date: \"2024-01-10\" },\n    { id: \"2\", name: \"Digital World\", email: \"digital@email.com\", date: \"2024-01-12\" },\n  ]);\n\n  if (user?.role !== 'admin') {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-red-600\">Acceso denegado. Solo administradores pueden ver esta p√°gina.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Panel de Administraci√≥n</h1>\n        <p className=\"text-gray-600\">Bienvenido, {user.name}</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Usuarios</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalUsers.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">+12% desde el mes pasado</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total √ìrdenes</CardTitle>\n            <ShoppingBag className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalOrders.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">+8% desde el mes pasado</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Ingresos Totales</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">CLP ${(stats.totalRevenue / 100).toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">+15% desde el mes pasado</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Productos</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalProducts}</div>\n            <p className=\"text-xs text-muted-foreground\">+5% desde el mes pasado</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"orders\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"orders\">√ìrdenes Recientes</TabsTrigger>\n          <TabsTrigger value=\"sellers\">Vendedores Pendientes</TabsTrigger>\n          <TabsTrigger value=\"reports\">Reportes</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"orders\">\n          <Card>\n            <CardHeader>\n              <CardTitle>√ìrdenes Recientes</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {recentOrders.map((order) => (\n                  <div key={order.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">{order.id}</p>\n                      <p className=\"text-sm text-gray-600\">{order.user}</p>\n                      <p className=\"text-sm text-gray-500\">{order.date}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium\">CLP ${(order.total / 100).toLocaleString()}</p>\n                      <Badge variant={order.status === 'delivered' ? 'default' : order.status === 'shipped' ? 'secondary' : 'outline'}>\n                        {order.status === 'delivered' ? 'Entregado' : order.status === 'shipped' ? 'Enviado' : 'Pendiente'}\n                      </Badge>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      Ver\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"sellers\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Vendedores Pendientes de Aprobaci√≥n</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {pendingSellers.map((seller) => (\n                  <div key={seller.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">{seller.name}</p>\n                      <p className=\"text-sm text-gray-600\">{seller.email}</p>\n                      <p className=\"text-sm text-gray-500\">Solicitado: {seller.date}</p>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button size=\"sm\" variant=\"default\">\n                        <CheckCircle className=\"h-4 w-4 mr-1\" />\n                        Aprobar\n                      </Button>\n                      <Button size=\"sm\" variant=\"destructive\">\n                        <XCircle className=\"h-4 w-4 mr-1\" />\n                        Rechazar\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"reports\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Reportes y An√°lisis</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"p-6 border rounded-lg\">\n                  <h3 className=\"font-semibold mb-2\">Ventas por Categor√≠a</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span>Smartphones</span>\n                      <span className=\"font-medium\">45%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Laptops</span>\n                      <span className=\"font-medium\">30%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Audio</span>\n                      <span className=\"font-medium\">15%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Otros</span>\n                      <span className=\"font-medium\">10%</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-6 border rounded-lg\">\n                  <h3 className=\"font-semibold mb-2\">Usuarios Activos</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span>Compradores</span>\n                      <span className=\"font-medium\">1,180</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Vendedores</span>\n                      <span className=\"font-medium\">45</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Administradores</span>\n                      <span className=\"font-medium\">5</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":9182},"AppleAura/client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Eye, EyeOff, Zap, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Auth() {\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  \n  // Login form\n  const [loginEmail, setLoginEmail] = useState(\"\");\n  const [loginPassword, setLoginPassword] = useState(\"\");\n  \n  // Register form\n  const [registerName, setRegisterName] = useState(\"\");\n  const [registerEmail, setRegisterEmail] = useState(\"\");\n  const [registerPassword, setRegisterPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  \n  const { login, register, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!loginEmail || !loginPassword) {\n      toast({\n        title: \"Campos requeridos\",\n        description: \"Por favor completa todos los campos\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      await login(loginEmail, loginPassword);\n      toast({\n        title: \"¬°Bienvenido de vuelta!\",\n        description: \"Has iniciado sesi√≥n exitosamente\",\n      });\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        title: \"Error al iniciar sesi√≥n\",\n        description: error.message || \"Credenciales inv√°lidas\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!registerName || !registerEmail || !registerPassword || !confirmPassword) {\n      toast({\n        title: \"Campos requeridos\",\n        description: \"Por favor completa todos los campos\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (registerPassword !== confirmPassword) {\n      toast({\n        title: \"Contrase√±as no coinciden\",\n        description: \"Las contrase√±as deben ser id√©nticas\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (registerPassword.length < 6) {\n      toast({\n        title: \"Contrase√±a muy corta\",\n        description: \"La contrase√±a debe tener al menos 6 caracteres\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      await register(registerEmail, registerPassword, registerName);\n      toast({\n        title: \"¬°Cuenta creada exitosamente!\",\n        description: \"Bienvenido a Silicon Trail\",\n      });\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        title: \"Error al crear cuenta\",\n        description: error.message || \"No se pudo crear la cuenta\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-apple-gray-6 to-white dark:from-apple-dark-1 dark:to-black relative overflow-hidden\">\n      {/* Background Effects */}\n      <div className=\"gradient-mesh absolute inset-0\"></div>\n      \n      {/* Floating Icons */}\n      <div className=\"absolute top-20 left-10 w-12 h-12 bg-gradient-to-br from-tech-blue to-apple-blue rounded-xl flex items-center justify-center animate-float opacity-30\">\n        <Zap className=\"w-6 h-6 text-white\" />\n      </div>\n      <div className=\"absolute top-32 right-16 w-10 h-10 bg-gradient-to-br from-tech-green to-apple-green rounded-lg flex items-center justify-center animate-float opacity-20\" style={{ animationDelay: '1s' }}>\n        <span className=\"text-white text-sm\">üì±</span>\n      </div>\n      <div className=\"absolute bottom-20 right-20 w-14 h-14 bg-gradient-to-br from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center animate-float opacity-25\" style={{ animationDelay: '2s' }}>\n        <span className=\"text-white text-lg\">üéß</span>\n      </div>\n\n      <div className=\"relative z-10 min-h-screen flex items-center justify-center px-4 py-12\">\n        <div className=\"w-full max-w-md\">\n          {/* Back Button */}\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/\")}\n            className=\"mb-6 hover:bg-white/10 dark:hover:bg-black/10\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Volver al inicio\n          </Button>\n\n          {/* Logo and Title */}\n          <div className=\"text-center mb-8\">\n            <div className=\"flex items-center justify-center space-x-3 mb-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-apple-blue to-tech-blue rounded-xl flex items-center justify-center\">\n                <Zap className=\"w-7 h-7 text-white\" />\n              </div>\n              <span className=\"text-title-1 font-semibold\">Silicon Trail</span>\n            </div>\n            <p className=\"text-body text-apple-gray-1 dark:text-apple-gray-2\">\n              Tu marketplace tecnol√≥gico de confianza\n            </p>\n          </div>\n\n          <Card className=\"glass-effect border-apple-gray-5 dark:border-apple-dark-3 shadow-apple-xl animate-scale-in\">\n            <CardContent className=\"p-0\">\n              <Tabs defaultValue=\"login\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2 bg-apple-gray-6 dark:bg-apple-dark-3\">\n                  <TabsTrigger value=\"login\" className=\"text-body font-medium\">\n                    Iniciar Sesi√≥n\n                  </TabsTrigger>\n                  <TabsTrigger value=\"register\" className=\"text-body font-medium\">\n                    Registrarse\n                  </TabsTrigger>\n                </TabsList>\n\n                {/* Login Tab */}\n                <TabsContent value=\"login\" className=\"p-6\">\n                  <form onSubmit={handleLogin} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-email\" className=\"text-body font-medium\">\n                        Correo electr√≥nico\n                      </Label>\n                      <Input\n                        id=\"login-email\"\n                        type=\"email\"\n                        placeholder=\"tu@email.com\"\n                        value={loginEmail}\n                        onChange={(e) => setLoginEmail(e.target.value)}\n                        className=\"bg-white dark:bg-apple-dark-2 border-apple-gray-3 dark:border-apple-dark-4 focus:ring-apple-blue focus:border-apple-blue\"\n                        required\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-password\" className=\"text-body font-medium\">\n                        Contrase√±a\n                      </Label>\n                      <div className=\"relative\">\n                        <Input\n                          id=\"login-password\"\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n                          value={loginPassword}\n                          onChange={(e) => setLoginPassword(e.target.value)}\n                          className=\"bg-white dark:bg-apple-dark-2 border-apple-gray-3 dark:border-apple-dark-4 focus:ring-apple-blue focus:border-apple-blue pr-10\"\n                          required\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"w-4 h-4 text-apple-gray-1\" />\n                          ) : (\n                            <Eye className=\"w-4 h-4 text-apple-gray-1\" />\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"text-right\">\n                      <Button variant=\"ghost\" className=\"text-apple-blue hover:text-blue-600 text-footnote p-0\">\n                        ¬øOlvidaste tu contrase√±a?\n                      </Button>\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      disabled={isLoading}\n                      className=\"w-full button-haptic bg-apple-blue dark:bg-apple-blue-dark text-white hover:bg-blue-600 dark:hover:bg-blue-500 py-3 text-body font-semibold shadow-glow-blue transition-all duration-200\"\n                    >\n                      {isLoading ? (\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                          <span>Iniciando sesi√≥n...</span>\n                        </div>\n                      ) : (\n                        \"Iniciar Sesi√≥n\"\n                      )}\n                    </Button>\n                  </form>\n                </TabsContent>\n\n                {/* Register Tab */}\n                <TabsContent value=\"register\" className=\"p-6\">\n                  <form onSubmit={handleRegister} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-name\" className=\"text-body font-medium\">\n                        Nombre completo\n                      </Label>\n                      <Input\n                        id=\"register-name\"\n                        type=\"text\"\n                        placeholder=\"Tu nombre\"\n                        value={registerName}\n                        onChange={(e) => setRegisterName(e.target.value)}\n                        className=\"bg-white dark:bg-apple-dark-2 border-apple-gray-3 dark:border-apple-dark-4 focus:ring-apple-blue focus:border-apple-blue\"\n                        required\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-email\" className=\"text-body font-medium\">\n                        Correo electr√≥nico\n                      </Label>\n                      <Input\n                        id=\"register-email\"\n                        type=\"email\"\n                        placeholder=\"tu@email.com\"\n                        value={registerEmail}\n                        onChange={(e) => setRegisterEmail(e.target.value)}\n                        className=\"bg-white dark:bg-apple-dark-2 border-apple-gray-3 dark:border-apple-dark-4 focus:ring-apple-blue focus:border-apple-blue\"\n                        required\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-password\" className=\"text-body font-medium\">\n                        Contrase√±a\n                      </Label>\n                      <div className=\"relative\">\n                        <Input\n                          id=\"register-password\"\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n                          value={registerPassword}\n                          onChange={(e) => setRegisterPassword(e.target.value)}\n                          className=\"bg-white dark:bg-apple-dark-2 border-apple-gray-3 dark:border-apple-dark-4 focus:ring-apple-blue focus:border-apple-blue pr-10\"\n                          required\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"w-4 h-4 text-apple-gray-1\" />\n                          ) : (\n                            <Eye className=\"w-4 h-4 text-apple-gray-1\" />\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"confirm-password\" className=\"text-body font-medium\">\n                        Confirmar contrase√±a\n                      </Label>\n                      <div className=\"relative\">\n                        <Input\n                          id=\"confirm-password\"\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n                          value={confirmPassword}\n                          onChange={(e) => setConfirmPassword(e.target.value)}\n                          className=\"bg-white dark:bg-apple-dark-2 border-apple-gray-3 dark:border-apple-dark-4 focus:ring-apple-blue focus:border-apple-blue pr-10\"\n                          required\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        >\n                          {showConfirmPassword ? (\n                            <EyeOff className=\"w-4 h-4 text-apple-gray-1\" />\n                          ) : (\n                            <Eye className=\"w-4 h-4 text-apple-gray-1\" />\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"text-footnote text-apple-gray-1\">\n                      Al registrarte, aceptas nuestros{\" \"}\n                      <Button variant=\"link\" className=\"text-apple-blue hover:text-blue-600 p-0 h-auto font-normal\">\n                        T√©rminos de Servicio\n                      </Button>{\" \"}\n                      y{\" \"}\n                      <Button variant=\"link\" className=\"text-apple-blue hover:text-blue-600 p-0 h-auto font-normal\">\n                        Pol√≠tica de Privacidad\n                      </Button>\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      disabled={isLoading}\n                      className=\"w-full button-haptic bg-apple-blue dark:bg-apple-blue-dark text-white hover:bg-blue-600 dark:hover:bg-blue-500 py-3 text-body font-semibold shadow-glow-blue transition-all duration-200\"\n                    >\n                      {isLoading ? (\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                          <span>Creando cuenta...</span>\n                        </div>\n                      ) : (\n                        \"Crear Cuenta\"\n                      )}\n                    </Button>\n                  </form>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n\n          {/* Additional Links */}\n          <div className=\"text-center mt-6\">\n            <p className=\"text-footnote text-apple-gray-1\">\n              ¬øQuieres vender tus productos?{\" \"}\n              <Button variant=\"link\" className=\"text-apple-blue hover:text-blue-600 p-0 h-auto font-normal\">\n                √önete como vendedor\n              </Button>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16413},"AppleAura/client/src/pages/cart.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Minus, Plus, Trash2, ShoppingBag } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { formatPrice } from \"@/lib/currency\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Cart() {\n  const [, setLocation] = useLocation();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { items, updateQuantity, removeItem, clearCart, isLoading } = useCart();\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center max-w-md mx-auto px-4\">\n          <div className=\"w-16 h-16 bg-apple-gray-5 dark:bg-apple-dark-3 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <ShoppingBag className=\"w-8 h-8 text-apple-gray-1\" />\n          </div>\n          <h1 className=\"text-title-1 font-semibold mb-4\">Inicia sesi√≥n para ver tu carrito</h1>\n          <p className=\"text-body text-apple-gray-1 mb-6\">\n            Necesitas una cuenta para guardar productos en tu carrito\n          </p>\n          <Button onClick={() => setLocation(\"/auth\")}>\n            Iniciar Sesi√≥n\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const handleQuantityChange = async (variantId: string, newQuantity: number) => {\n    if (newQuantity === 0) {\n      await removeItem(variantId);\n    } else {\n      await updateQuantity(variantId, newQuantity);\n    }\n  };\n\n  const handleCheckout = async () => {\n    setIsProcessing(true);\n    try {\n      // Here would be the checkout logic\n      toast({\n        title: \"Pr√≥ximamente\",\n        description: \"La funcionalidad de checkout estar√° disponible pronto\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Hubo un problema al procesar el checkout\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const subtotal = 0; // Would calculate from item prices\n  const shipping = 0; // Free shipping\n  const total = subtotal + shipping;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-apple-gray-5 dark:bg-apple-dark-3 rounded w-48\" />\n            {Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"bg-white dark:bg-apple-dark-2 rounded-2xl p-6 space-y-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-20 h-20 bg-apple-gray-5 dark:bg-apple-dark-3 rounded-lg\" />\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"h-4 bg-apple-gray-5 dark:bg-apple-dark-3 rounded w-3/4\" />\n                    <div className=\"h-3 bg-apple-gray-5 dark:bg-apple-dark-3 rounded w-1/2\" />\n                  </div>\n                  <div className=\"h-8 bg-apple-gray-5 dark:bg-apple-dark-3 rounded w-24\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-apple-gray-6 dark:bg-apple-dark-1\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <h1 className=\"text-title-1 font-semibold\">Carrito de Compras</h1>\n          {items.length > 0 && (\n            <Button\n              variant=\"ghost\"\n              onClick={clearCart}\n              className=\"text-apple-red hover:text-apple-red-dark\"\n            >\n              Vaciar carrito\n            </Button>\n          )}\n        </div>\n\n        {items.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <div className=\"w-24 h-24 bg-apple-gray-5 dark:bg-apple-dark-3 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <ShoppingBag className=\"w-12 h-12 text-apple-gray-1\" />\n            </div>\n            <h2 className=\"text-title-2 font-semibold mb-4\">Tu carrito est√° vac√≠o</h2>\n            <p className=\"text-body text-apple-gray-1 mb-8 max-w-md mx-auto\">\n              Parece que a√∫n no has a√±adido nada a tu carrito. Ve a explorar nuestros incre√≠bles productos.\n            </p>\n            <Button \n              onClick={() => setLocation(\"/\")}\n              className=\"button-haptic bg-apple-blue dark:bg-apple-blue-dark text-white hover:bg-blue-600 dark:hover:bg-blue-500\"\n            >\n              Seguir Comprando\n            </Button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Cart Items */}\n            <div className=\"lg:col-span-2 space-y-4\">\n              {items.map((item) => (\n                <div \n                  key={item.id}\n                  className=\"bg-white dark:bg-apple-dark-2 rounded-2xl p-6 shadow-apple border border-apple-gray-5 dark:border-apple-dark-3 hover-lift\"\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    {/* Product Image Placeholder */}\n                    <div className=\"w-20 h-20 bg-apple-gray-4 dark:bg-apple-dark-4 rounded-lg flex items-center justify-center\">\n                      <span className=\"text-caption-1 text-apple-gray-1\">IMG</span>\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <h3 className=\"text-headline font-semibold text-gray-900 dark:text-white mb-1\">\n                        Producto {item.variantId.slice(0, 8)}\n                      </h3>\n                      <p className=\"text-footnote text-apple-gray-1 mb-2\">\n                        SKU: {item.variantId}\n                      </p>\n                      <p className=\"text-body font-semibold text-apple-blue dark:text-apple-blue-dark\">\n                        {formatPrice(0)} {/* Would show actual price */}\n                      </p>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-3\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => handleQuantityChange(item.variantId, item.quantity - 1)}\n                        className=\"h-8 w-8 button-haptic\"\n                      >\n                        <Minus className=\"w-4 h-4\" />\n                      </Button>\n                      <span className=\"text-body font-medium min-w-[2rem] text-center\">\n                        {item.quantity}\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => handleQuantityChange(item.variantId, item.quantity + 1)}\n                        className=\"h-8 w-8 button-haptic\"\n                      >\n                        <Plus className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                    \n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => removeItem(item.variantId)}\n                      className=\"text-apple-red hover:text-apple-red-dark hover:bg-red-50 dark:hover:bg-red-900/20 button-haptic\"\n                    >\n                      <Trash2 className=\"w-5 h-5\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Order Summary */}\n            <div className=\"lg:col-span-1\">\n              <div className=\"glass-effect bg-white dark:bg-apple-dark-2 rounded-2xl p-6 shadow-apple-lg border border-apple-gray-5 dark:border-apple-dark-3 sticky top-24\">\n                <h3 className=\"text-title-3 font-semibold mb-6\">Resumen del Pedido</h3>\n                \n                <div className=\"space-y-4 mb-6\">\n                  <div className=\"flex justify-between text-body\">\n                    <span className=\"text-apple-gray-1\">Subtotal ({items.length} {items.length === 1 ? 'producto' : 'productos'})</span>\n                    <span className=\"font-medium\">{formatPrice(subtotal)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-body\">\n                    <span className=\"text-apple-gray-1\">Env√≠o</span>\n                    <span className=\"font-medium text-apple-green\">Gratis</span>\n                  </div>\n                  <div className=\"border-t border-apple-gray-5 dark:border-apple-dark-3 pt-4\">\n                    <div className=\"flex justify-between text-title-3 font-semibold\">\n                      <span>Total</span>\n                      <span className=\"text-apple-blue dark:text-apple-blue-dark\">{formatPrice(total)}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <Button\n                  onClick={handleCheckout}\n                  disabled={isProcessing || items.length === 0}\n                  className=\"w-full button-haptic bg-apple-blue dark:bg-apple-blue-dark text-white hover:bg-blue-600 dark:hover:bg-blue-500 py-4 text-body font-semibold shadow-glow-blue transition-all duration-200\"\n                >\n                  {isProcessing ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                      <span>Procesando...</span>\n                    </div>\n                  ) : (\n                    \"Proceder al Pago\"\n                  )}\n                </Button>\n\n                <div className=\"mt-6 text-center\">\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => setLocation(\"/\")}\n                    className=\"text-apple-blue dark:text-apple-blue-dark hover:text-blue-600\"\n                  >\n                    Seguir comprando\n                  </Button>\n                </div>\n\n                {/* Security Badges */}\n                <div className=\"mt-6 pt-6 border-t border-apple-gray-5 dark:border-apple-dark-3\">\n                  <div className=\"flex items-center justify-center space-x-4 text-apple-gray-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-4 h-4 bg-apple-green rounded-full\" />\n                      <span className=\"text-caption-1\">Compra segura</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-4 h-4 bg-apple-blue rounded-full\" />\n                      <span className=\"text-caption-1\">Garant√≠a total</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11107},"AppleAura/client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Cpu, Smartphone, Gamepad2, Headphones, Home as HomeIcon, Truck } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ProductCard } from \"@/components/product-card\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const [searchParams] = useState(() => new URLSearchParams(window.location.search));\n  const searchQuery = searchParams.get(\"search\") || \"\";\n\n  const { data: products = [], isLoading } = useQuery({\n    queryKey: [\"/api/products\", { search: searchQuery, limit: 20 }],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchQuery) params.append(\"search\", searchQuery);\n      params.append(\"limit\", \"20\");\n      \n      const response = await fetch(`/api/products?${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch products\");\n      return response.json();\n    },\n  });\n\n  const quickFilters = [\n    { icon: Cpu, label: \"üíª Computaci√≥n\", filter: \"computacion\" },\n    { icon: Smartphone, label: \"üì± Smartphones\", filter: \"smartphones\" },\n    { icon: Gamepad2, label: \"üéÆ Gaming\", filter: \"gaming\" },\n    { icon: Headphones, label: \"üéß Audio\", filter: \"audio\" },\n    { icon: HomeIcon, label: \"üè† Smart Home\", filter: \"smart-home\" },\n    { icon: Truck, label: \"üöö Env√≠o Gratis\", filter: \"free-shipping\" },\n  ];\n\n  const handleProductView = (productId: string) => {\n    setLocation(`/product/${productId}`);\n  };\n\n  const floatingIcons = [\n    { icon: Cpu, className: \"top-20 left-10 w-12 h-12 bg-gradient-to-br from-tech-blue to-apple-blue\", delay: \"0s\" },\n    { icon: Smartphone, className: \"top-32 right-16 w-10 h-10 bg-gradient-to-br from-tech-green to-apple-green\", delay: \"1s\" },\n    { icon: Headphones, className: \"bottom-20 right-20 w-14 h-14 bg-gradient-to-br from-purple-500 to-pink-500\", delay: \"2s\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-gradient-to-br from-apple-gray-6 to-white dark:from-apple-dark-1 dark:to-black\">\n        <div className=\"gradient-mesh absolute inset-0\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"text-center animate-fade-in\">\n            <h1 className=\"text-display-large bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent mb-6\">\n              El futuro de la tecnolog√≠a <br />en tus manos\n            </h1>\n            <p className=\"text-title-3 text-apple-gray-1 dark:text-apple-gray-2 mb-8 max-w-2xl mx-auto\">\n              Descubre los productos m√°s innovadores con la mejor experiencia de compra. Vendedores verificados, env√≠os seguros y garant√≠a total.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <Button \n                onClick={() => setLocation(\"/#productos\")}\n                className=\"button-haptic px-8 py-4 bg-apple-blue dark:bg-apple-blue-dark text-white hover:bg-blue-600 dark:hover:bg-blue-500 shadow-apple-lg hover:shadow-glow-blue transition-all duration-200\"\n              >\n                Explorar Productos\n              </Button>\n              <Button \n                onClick={() => setLocation(\"/auth\")}\n                variant=\"outline\"\n                className=\"button-haptic px-8 py-4 bg-white dark:bg-apple-dark-2 text-apple-blue dark:text-apple-blue-dark border-apple-blue dark:border-apple-blue-dark hover:bg-apple-blue hover:text-white dark:hover:bg-apple-blue-dark transition-all duration-200\"\n              >\n                Vender en Silicon Trail\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        {/* Floating Tech Icons */}\n        {floatingIcons.map((item, index) => {\n          const Icon = item.icon;\n          return (\n            <div\n              key={index}\n              className={`absolute ${item.className} rounded-xl flex items-center justify-center animate-float opacity-30`}\n              style={{ animationDelay: item.delay }}\n            >\n              <Icon className=\"w-6 h-6 text-white\" />\n            </div>\n          );\n        })}\n      </section>\n\n      {/* Quick Filters */}\n      <section className=\"py-8 bg-apple-gray-6 dark:bg-apple-dark-1\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-wrap gap-3 justify-center\">\n            {quickFilters.map((filter, index) => (\n              <Button\n                key={index}\n                variant=\"outline\"\n                className=\"px-4 py-2 bg-white dark:bg-apple-dark-2 rounded-full text-subheadline font-medium text-gray-700 dark:text-gray-300 hover:bg-apple-blue hover:text-white dark:hover:bg-apple-blue-dark transition-all duration-200 shadow-apple\"\n              >\n                {filter.label}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Products Section */}\n      <main id=\"productos\" className=\"py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Filters and Sort */}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-between items-center mb-8\">\n            <div className=\"flex flex-wrap gap-3\">\n              <select className=\"px-4 py-2 bg-white dark:bg-apple-dark-2 border border-apple-gray-3 dark:border-apple-dark-4 rounded-lg text-subheadline focus:outline-none focus:ring-2 focus:ring-apple-blue\">\n                <option>Precio: Todos</option>\n                <option>$0 - $50.000</option>\n                <option>$50.000 - $200.000</option>\n                <option>$200.000+</option>\n              </select>\n              <select className=\"px-4 py-2 bg-white dark:bg-apple-dark-2 border border-apple-gray-3 dark:border-apple-dark-4 rounded-lg text-subheadline focus:outline-none focus:ring-2 focus:ring-apple-blue\">\n                <option>Marca: Todas</option>\n                <option>Apple</option>\n                <option>Samsung</option>\n                <option>Sony</option>\n                <option>NVIDIA</option>\n              </select>\n              <select className=\"px-4 py-2 bg-white dark:bg-apple-dark-2 border border-apple-gray-3 dark:border-apple-dark-4 rounded-lg text-subheadline focus:outline-none focus:ring-2 focus:ring-apple-blue\">\n                <option>Env√≠o: Todos</option>\n                <option>Gratis</option>\n                <option>Mismo d√≠a</option>\n                <option>Express</option>\n              </select>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <span className=\"text-subheadline text-apple-gray-1\">Ordenar por:</span>\n              <select className=\"px-4 py-2 bg-white dark:bg-apple-dark-2 border border-apple-gray-3 dark:border-apple-dark-4 rounded-lg text-subheadline focus:outline-none focus:ring-2 focus:ring-apple-blue\">\n                <option>M√°s Populares</option>\n                <option>Precio: Menor a Mayor</option>\n                <option>Precio: Mayor a Menor</option>\n                <option>Mejor Calificados</option>\n                <option>M√°s Nuevos</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Products Grid */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12\">\n              {Array.from({ length: 8 }).map((_, i) => (\n                <div key={i} className=\"bg-white dark:bg-apple-dark-2 rounded-2xl overflow-hidden shadow-apple border border-apple-gray-5 dark:border-apple-dark-3 animate-pulse\">\n                  <div className=\"w-full h-48 bg-apple-gray-5 dark:bg-apple-dark-3\" />\n                  <div className=\"p-4 space-y-4\">\n                    <div className=\"h-4 bg-apple-gray-5 dark:bg-apple-dark-3 rounded\" />\n                    <div className=\"h-6 bg-apple-gray-5 dark:bg-apple-dark-3 rounded w-1/2\" />\n                    <div className=\"h-4 bg-apple-gray-5 dark:bg-apple-dark-3 rounded w-3/4\" />\n                    <div className=\"h-10 bg-apple-gray-5 dark:bg-apple-dark-3 rounded\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : products.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"w-16 h-16 bg-apple-gray-5 dark:bg-apple-dark-3 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Smartphone className=\"w-8 h-8 text-apple-gray-1\" />\n              </div>\n              <h3 className=\"text-headline font-semibold mb-2\">No se encontraron productos</h3>\n              <p className=\"text-body text-apple-gray-1 mb-6\">\n                {searchQuery \n                  ? `No hay productos que coincidan con \"${searchQuery}\"`\n                  : \"A√∫n no hay productos disponibles\"\n                }\n              </p>\n              {searchQuery && (\n                <Button onClick={() => setLocation(\"/\")}>\n                  Ver todos los productos\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12\">\n              {products.map((product: any) => (\n                <ProductCard\n                  key={product.id}\n                  product={{\n                    ...product,\n                    rating: 4.8,\n                    reviewCount: 127,\n                    seller: {\n                      displayName: \"TechStore Pro\",\n                      location: \"Las Condes, 2.5km\"\n                    },\n                    trending: Math.random() > 0.7,\n                    freeShipping: Math.random() > 0.5,\n                    stock: Math.floor(Math.random() * 20) + 1,\n                  }}\n                  onView={handleProductView}\n                />\n              ))}\n            </div>\n          )}\n\n          {/* Load More */}\n          {products.length > 0 && (\n            <div className=\"text-center\">\n              <Button \n                variant=\"outline\"\n                className=\"button-haptic px-8 py-4 bg-apple-gray-6 dark:bg-apple-dark-2 text-gray-900 dark:text-white hover:bg-apple-gray-5 dark:hover:bg-apple-dark-3 transition-all duration-200 shadow-apple\"\n              >\n                Cargar M√°s Productos\n              </Button>\n            </div>\n          )}\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-apple-gray-6 dark:bg-apple-dark-1 border-t border-apple-gray-5 dark:border-apple-dark-3 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div className=\"col-span-1 md:col-span-2\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-apple-blue to-tech-blue rounded-lg flex items-center justify-center\">\n                  <Cpu className=\"w-5 h-5 text-white\" />\n                </div>\n                <span className=\"text-title-2 font-semibold\">Silicon Trail</span>\n              </div>\n              <p className=\"text-body text-apple-gray-1 dark:text-apple-gray-2 mb-6 max-w-md\">\n                El marketplace de tecnolog√≠a m√°s confiable de Chile. Productos verificados, vendedores certificados y la mejor experiencia de compra.\n              </p>\n            </div>\n            \n            <div>\n              <h3 className=\"text-headline font-semibold text-gray-900 dark:text-white mb-4\">Comprar</h3>\n              <ul className=\"space-y-3\">\n                <li><a href=\"#\" className=\"text-body text-apple-gray-1 hover:text-apple-blue transition-colors\">Computaci√≥n</a></li>\n                <li><a href=\"#\" className=\"text-body text-apple-gray-1 hover:text-apple-blue transition-colors\">Smartphones</a></li>\n                <li><a href=\"#\" className=\"text-body text-apple-gray-1 hover:text-apple-blue transition-colors\">Gaming</a></li>\n                <li><a href=\"#\" className=\"text-body text-apple-gray-1 hover:text-apple-blue transition-colors\">Audio</a></li>\n                <li><a href=\"#\" className=\"text-body text-apple-gray-1 hover:text-apple-blue transition-colors\">Smart Home</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"text-headline font-semibold text-gray-900 dark:text-white mb-4\">Soporte</h3>\n              <ul className=\"space-y-3\">\n                <li><a href=\"#\" className=\"text-body text-apple-gray-1 hover:text-apple-blue transition-colors\">Centro de Ayuda</a></li>\n                <li><a href=\"#\" className=\"text-body text-apple-gray-1 hover:text-apple-blue transition-colors\">Env√≠os y Devoluciones</a></li>\n                <li><a href=\"#\" className=\"text-body text-apple-gray-1 hover:text-apple-blue transition-colors\">Garant√≠as</a></li>\n                <li><a href=\"#\" className=\"text-body text-apple-gray-1 hover:text-apple-blue transition-colors\">Contacto</a></li>\n                <li><a href=\"#\" className=\"text-body text-apple-gray-1 hover:text-apple-blue transition-colors\">Vender</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-apple-gray-5 dark:border-apple-dark-3 mt-8 pt-8 text-center\">\n            <p className=\"text-footnote text-apple-gray-1\">\n              ¬© 2024 Silicon Trail. Todos los derechos reservados. | \n              <a href=\"#\" className=\"hover:text-apple-blue transition-colors\"> Privacidad</a> | \n              <a href=\"#\" className=\"hover:text-apple-blue transition-colors\"> T√©rminos</a>\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":13866},"AppleAura/client/src/pages/not-found.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Home, Search, ArrowLeft } from \"lucide-react\";\n\nexport default function NotFound() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-50 to-white flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md text-center shadow-lg\">\n        <CardContent className=\"pt-6\">\n          {/* Logo Apple Estilizado */}\n          <div className=\"mb-6\">\n            <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mb-4\">\n              <svg className=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M18.71 19.5C17.88 20.74 17 21.95 15.66 21.97C14.32 21.99 13.89 21.18 12.37 21.18C10.84 21.18 10.37 21.95 9.09 21.99C7.85 22.03 6.8 20.68 5.96 19.46C4.25 17 2.94 12.45 4.7 9.39C5.57 7.87 7.13 6.91 8.82 6.88C10.1 6.86 11.32 7.75 12.11 7.75C12.89 7.75 14.37 6.68 15.92 6.84C16.57 6.87 18.39 7.1 19.56 8.82C19.47 8.88 17.39 10.19 17.41 12.63C17.44 15.65 20.06 16.66 20.09 16.67C20.06 16.74 19.67 18.11 18.71 19.5Z\"/>\n                <path d=\"M13 3.5C13.73 2.67 14.94 2.04 15.94 2C16.07 3.17 15.6 4.35 14.9 5.19C14.21 6.04 13.07 6.7 11.95 6.61C11.8 5.46 12.36 4.26 13 3.5Z\"/>\n              </svg>\n            </div>\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              P√°gina no encontrada\n            </h1>\n            <p className=\"text-gray-600 mb-6\">\n              Lo sentimos, la p√°gina que buscas no existe o ha sido movida.\n            </p>\n          </div>\n\n          {/* Error 404 Estilizado */}\n          <div className=\"mb-8\">\n            <span className=\"text-6xl font-bold bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent\">\n              404\n            </span>\n          </div>\n\n          {/* Botones de Acci√≥n */}\n          <div className=\"space-y-3\">\n            <Button\n              onClick={() => setLocation(\"/\")}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2.5\"\n            >\n              <Home className=\"w-4 h-4 mr-2\" />\n              Ir al inicio\n            </Button>\n\n            <Button\n              variant=\"outline\"\n              onClick={() => window.history.back()}\n              className=\"w-full border-gray-300 text-gray-700 hover:bg-gray-50\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver atr√°s\n            </Button>\n\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation(\"/products\")}\n              className=\"w-full text-gray-600 hover:text-gray-900\"\n            >\n              <Search className=\"w-4 h-4 mr-2\" />\n              Explorar productos\n            </Button>\n          </div>\n\n          {/* Enlaces √∫tiles */}\n          <div className=\"mt-6 pt-6 border-t border-gray-100\">\n            <p className=\"text-sm text-gray-500 mb-3\">\n              Enlaces √∫tiles:\n            </p>\n            <div className=\"flex justify-center space-x-4 text-sm\">\n              <button\n                onClick={() => setLocation(\"/\")}\n                className=\"text-blue-600 hover:underline\"\n              >\n                Inicio\n              </button>\n              <button\n                onClick={() => setLocation(\"/products\")}\n                className=\"text-blue-600 hover:underline\"\n              >\n                Productos\n              </button>\n              <button\n                onClick={() => setLocation(\"/auth\")}\n                className=\"text-blue-600 hover:underline\"\n              >\n                Mi cuenta\n              </button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3893},"AppleAura/client/src/pages/product-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { ArrowLeft, Heart, Share2, Star, CheckCircle, MapPin, Shield, Truck, RotateCcw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatPrice } from \"@/lib/currency\";\n\nexport default function ProductDetail() {\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n  const [selectedVariant, setSelectedVariant] = useState<string>(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [isLiked, setIsLiked] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n  const [reviewRating, setReviewRating] = useState(5);\n  const [reviewComment, setReviewComment] = useState(\"\");\n  \n  const { addToCart } = useCart();\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  const { data: product, isLoading: productLoading } = useQuery({\n    queryKey: [\"/api/products\", id],\n    queryFn: async () => {\n      const response = await fetch(`/api/products/${id}`);\n      if (!response.ok) throw new Error(\"Product not found\");\n      return response.json();\n    },\n    enabled: !!id,\n  });\n\n  const { data: variants = [] } = useQuery({\n    queryKey: [\"/api/products\", id, \"variants\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/products/${id}/variants`);\n      if (!response.ok) throw new Error(\"Failed to fetch variants\");\n      return response.json();\n    },\n    enabled: !!id,\n  });\n\n  const { data: reviews = [] } = useQuery({\n    queryKey: [\"/api/products\", id, \"reviews\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/products/${id}/reviews`);\n      if (!response.ok) throw new Error(\"Failed to fetch reviews\");\n      return response.json();\n    },\n    enabled: !!id,\n  });\n\n  const currentVariant = variants.find((v: any) => v.id === selectedVariant) || variants[0];\n\n  const handleAddToCart = async () => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Inicia sesi√≥n\",\n        description: \"Debes iniciar sesi√≥n para a√±adir productos al carrito\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!currentVariant) {\n      toast({\n        title: \"Error\",\n        description: \"Selecciona una variante del producto\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsAdding(true);\n    try {\n      await addToCart(currentVariant.id, quantity);\n      toast({\n        title: \"¬°A√±adido al carrito!\",\n        description: `${product.title} se a√±adi√≥ a tu carrito`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo a√±adir el producto al carrito\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsAdding(false);\n    }\n  };\n\n  const renderStars = (rating: number, interactive = false, onRate?: (rating: number) => void) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`w-4 h-4 ${interactive ? 'cursor-pointer hover:text-yellow-400' : ''} ${\n          i < rating ? \"text-yellow-400 fill-current\" : \"text-apple-gray-3\"\n        }`}\n        onClick={() => interactive && onRate?.(i + 1)}\n      />\n    ));\n  };\n\n  if (productLoading) {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"flex items-center space-x-4 mb-8\">\n              <div className=\"w-8 h-8 bg-apple-gray-5 dark:bg-apple-dark-3 rounded-full\" />\n              <div className=\"h-6 bg-apple-gray-5 dark:bg-apple-dark-3 rounded w-48\" />\n            </div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n              <div className=\"w-full h-96 bg-apple-gray-5 dark:bg-apple-dark-3 rounded-2xl\" />\n              <div className=\"space-y-6\">\n                <div className=\"h-8 bg-apple-gray-5 dark:bg-apple-dark-3 rounded w-3/4\" />\n                <div className=\"h-6 bg-apple-gray-5 dark:bg-apple-dark-3 rounded w-1/2\" />\n                <div className=\"h-12 bg-apple-gray-5 dark:bg-apple-dark-3 rounded\" />\n                <div className=\"h-12 bg-apple-gray-5 dark:bg-apple-dark-3 rounded\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-title-1 font-semibold mb-4\">Producto no encontrado</h1>\n          <Button onClick={() => setLocation(\"/\")}>\n            Volver al inicio\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const averageRating = reviews.length > 0 \n    ? reviews.reduce((sum: number, review: any) => sum + review.rating, 0) / reviews.length \n    : 0;\n\n  return (\n    <div className=\"min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Breadcrumb */}\n        <div className=\"flex items-center space-x-4 mb-8\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/\")}\n            className=\"hover:bg-apple-gray-6 dark:hover:bg-apple-dark-2\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <h1 className=\"text-title-2 font-semibold\">{product.title}</h1>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 mb-12\">\n          {/* Product Gallery */}\n          <div className=\"space-y-4\">\n            <div className=\"aspect-square bg-white dark:bg-apple-dark-2 rounded-2xl overflow-hidden shadow-apple border border-apple-gray-5 dark:border-apple-dark-3\">\n              <img\n                src={product.images[0] || \"https://images.unsplash.com/photo-1541807084-5c52b6b3adef?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"}\n                alt={product.title}\n                className=\"w-full h-full object-cover\"\n              />\n            </div>\n            \n            {/* Thumbnail Gallery */}\n            {product.images.length > 1 && (\n              <div className=\"grid grid-cols-4 gap-2\">\n                {product.images.slice(1, 5).map((image: string, index: number) => (\n                  <div key={index} className=\"aspect-square bg-white dark:bg-apple-dark-2 rounded-lg overflow-hidden border border-apple-gray-5 dark:border-apple-dark-3\">\n                    <img src={image} alt={`${product.title} ${index + 2}`} className=\"w-full h-full object-cover\" />\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Product Info */}\n          <div className=\"space-y-6\">\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center space-x-2\">\n                  {averageRating > 0 && (\n                    <>\n                      <div className=\"flex items-center\">\n                        {renderStars(Math.round(averageRating))}\n                      </div>\n                      <span className=\"text-footnote text-apple-gray-1\">\n                        ({averageRating.toFixed(1)}) ¬∑ {reviews.length} rese√±as\n                      </span>\n                    </>\n                  )}\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => setIsLiked(!isLiked)}\n                  >\n                    <Heart className={`w-5 h-5 ${isLiked ? 'text-red-500 fill-current' : 'text-gray-600'}`} />\n                  </Button>\n                  <Button variant=\"ghost\" size=\"icon\">\n                    <Share2 className=\"w-5 h-5\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between mb-6\">\n                <span className=\"text-display font-bold text-apple-blue dark:text-apple-blue-dark\">\n                  {currentVariant ? formatPrice(currentVariant.priceCents, currentVariant.currency) : \"\"}\n                </span>\n                <Badge className=\"bg-apple-green text-white\">\n                  En stock\n                </Badge>\n              </div>\n            </div>\n\n            {/* Variants */}\n            {variants.length > 1 && (\n              <div className=\"space-y-3\">\n                <label className=\"text-headline font-semibold\">Variante:</label>\n                <Select value={selectedVariant} onValueChange={setSelectedVariant}>\n                  <SelectTrigger className=\"w-full\">\n                    <SelectValue placeholder=\"Selecciona una variante\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {variants.map((variant: any) => (\n                      <SelectItem key={variant.id} value={variant.id}>\n                        {variant.sku} - {formatPrice(variant.priceCents, variant.currency)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {/* Quantity */}\n            <div className=\"space-y-3\">\n              <label className=\"text-headline font-semibold\">Cantidad:</label>\n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                >\n                  -\n                </Button>\n                <span className=\"text-body font-medium min-w-[3rem] text-center\">{quantity}</span>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => setQuantity(quantity + 1)}\n                >\n                  +\n                </Button>\n              </div>\n            </div>\n\n            {/* Add to Cart */}\n            <Button\n              onClick={handleAddToCart}\n              disabled={isAdding || !currentVariant}\n              className=\"w-full button-haptic bg-apple-blue dark:bg-apple-blue-dark text-white hover:bg-blue-600 dark:hover:bg-blue-500 py-4 text-body font-semibold shadow-apple-lg transition-all duration-200\"\n            >\n              {isAdding ? (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                  <span>A√±adiendo al carrito...</span>\n                </div>\n              ) : (\n                \"A√±adir al carrito\"\n              )}\n            </Button>\n\n            {/* Benefits */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 pt-6 border-t border-apple-gray-5 dark:border-apple-dark-3\">\n              <div className=\"flex items-center space-x-3\">\n                <Shield className=\"w-5 h-5 text-apple-green\" />\n                <span className=\"text-footnote\">Garant√≠a oficial</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Truck className=\"w-5 h-5 text-apple-blue\" />\n                <span className=\"text-footnote\">Env√≠o gratis</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <RotateCcw className=\"w-5 h-5 text-apple-gray-1\" />\n                <span className=\"text-footnote\">30 d√≠as devoluci√≥n</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Product Details Tabs */}\n        <Tabs defaultValue=\"description\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"description\">Descripci√≥n</TabsTrigger>\n            <TabsTrigger value=\"specifications\">Especificaciones</TabsTrigger>\n            <TabsTrigger value=\"reviews\">Rese√±as ({reviews.length})</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"description\" className=\"mt-6\">\n            <div className=\"bg-white dark:bg-apple-dark-2 rounded-2xl p-6 shadow-apple border border-apple-gray-5 dark:border-apple-dark-3\">\n              <p className=\"text-body text-gray-700 dark:text-gray-300 leading-relaxed\">\n                {product.description || \"No hay descripci√≥n disponible para este producto.\"}\n              </p>\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"specifications\" className=\"mt-6\">\n            <div className=\"bg-white dark:bg-apple-dark-2 rounded-2xl p-6 shadow-apple border border-apple-gray-5 dark:border-apple-dark-3\">\n              {product.specsJson ? (\n                <div className=\"space-y-4\">\n                  {Object.entries(product.specsJson as Record<string, any>).map(([key, value]) => (\n                    <div key={key} className=\"flex justify-between py-2 border-b border-apple-gray-5 dark:border-apple-dark-3 last:border-b-0\">\n                      <span className=\"text-body font-medium capitalize\">{key.replace(/([A-Z])/g, ' $1').trim()}</span>\n                      <span className=\"text-body text-apple-gray-1\">{String(value)}</span>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-body text-apple-gray-1\">No hay especificaciones disponibles.</p>\n              )}\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"reviews\" className=\"mt-6\">\n            <div className=\"space-y-6\">\n              {/* Review Form */}\n              {isAuthenticated && (\n                <div className=\"bg-white dark:bg-apple-dark-2 rounded-2xl p-6 shadow-apple border border-apple-gray-5 dark:border-apple-dark-3\">\n                  <h3 className=\"text-headline font-semibold mb-4\">Escribir una rese√±a</h3>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-body font-medium mb-2 block\">Calificaci√≥n:</label>\n                      <div className=\"flex items-center space-x-1\">\n                        {renderStars(reviewRating, true, setReviewRating)}\n                      </div>\n                    </div>\n                    <div>\n                      <label className=\"text-body font-medium mb-2 block\">Comentario:</label>\n                      <Textarea\n                        value={reviewComment}\n                        onChange={(e) => setReviewComment(e.target.value)}\n                        placeholder=\"Comparte tu experiencia con este producto...\"\n                        rows={4}\n                      />\n                    </div>\n                    <Button className=\"button-haptic\">\n                      Publicar rese√±a\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {/* Reviews List */}\n              <div className=\"space-y-4\">\n                {reviews.length === 0 ? (\n                  <div className=\"bg-white dark:bg-apple-dark-2 rounded-2xl p-8 shadow-apple border border-apple-gray-5 dark:border-apple-dark-3 text-center\">\n                    <p className=\"text-body text-apple-gray-1\">A√∫n no hay rese√±as para este producto.</p>\n                  </div>\n                ) : (\n                  reviews.map((review: any) => (\n                    <div key={review.id} className=\"bg-white dark:bg-apple-dark-2 rounded-2xl p-6 shadow-apple border border-apple-gray-5 dark:border-apple-dark-3\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-8 h-8 bg-gradient-to-br from-apple-blue to-apple-green rounded-full flex items-center justify-center\">\n                            <span className=\"text-caption-1 font-semibold text-white\">U</span>\n                          </div>\n                          <div>\n                            <p className=\"text-body font-medium\">Usuario</p>\n                            <div className=\"flex items-center\">\n                              {renderStars(review.rating)}\n                            </div>\n                          </div>\n                        </div>\n                        <span className=\"text-footnote text-apple-gray-1\">\n                          {new Date(review.createdAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                      {review.comment && (\n                        <p className=\"text-body text-gray-700 dark:text-gray-300\">{review.comment}</p>\n                      )}\n                    </div>\n                  ))\n                )}\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17279},"AppleAura/client/src/pages/seller-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Package, \n  DollarSign, \n  ShoppingCart, \n  TrendingUp, \n  Plus, \n  Eye, \n  Edit, \n  Trash2,\n  Upload\n} from \"lucide-react\";\n\nexport default function SellerDashboard() {\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  const [stats] = useState({\n    totalProducts: 24,\n    totalOrders: 156,\n    totalRevenue: 45680000,\n    pendingOrders: 8\n  });\n\n  const [products] = useState([\n    { \n      id: \"1\", \n      title: \"iPhone 15 Pro Max\", \n      price: 1299990, \n      stock: 15, \n      status: \"active\",\n      sales: 45\n    },\n    { \n      id: \"2\", \n      title: \"MacBook Pro 14\\\" M3\", \n      price: 2199990, \n      stock: 8, \n      status: \"active\",\n      sales: 23\n    },\n    { \n      id: \"3\", \n      title: \"AirPods Pro\", \n      price: 279990, \n      stock: 0, \n      status: \"out_of_stock\",\n      sales: 67\n    },\n  ]);\n\n  const [recentOrders] = useState([\n    { id: \"ORD-001\", product: \"iPhone 15 Pro Max\", buyer: \"Mar√≠a Gonz√°lez\", total: 1299990, status: \"shipped\", date: \"2024-01-15\" },\n    { id: \"ORD-002\", product: \"MacBook Pro 14\\\"\", buyer: \"Carlos Mendoza\", total: 2199990, status: \"pending\", date: \"2024-01-14\" },\n    { id: \"ORD-003\", product: \"AirPods Pro\", buyer: \"Ana Rodr√≠guez\", total: 279990, status: \"delivered\", date: \"2024-01-13\" },\n  ]);\n\n  if (user?.role !== 'seller') {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-red-600\">Acceso denegado. Solo vendedores pueden ver esta p√°gina.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Panel de Vendedor</h1>\n        <p className=\"text-gray-600\">Bienvenido, {user.name}</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Productos</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalProducts}</div>\n            <p className=\"text-xs text-muted-foreground\">+2 este mes</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">√ìrdenes Totales</CardTitle>\n            <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalOrders}</div>\n            <p className=\"text-xs text-muted-foreground\">+12% desde el mes pasado</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Ingresos Totales</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">CLP ${(stats.totalRevenue / 100).toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">+15% desde el mes pasado</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">√ìrdenes Pendientes</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.pendingOrders}</div>\n            <p className=\"text-xs text-muted-foreground\">Requieren atenci√≥n</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Resumen</TabsTrigger>\n          <TabsTrigger value=\"products\">Productos</TabsTrigger>\n          <TabsTrigger value=\"orders\">√ìrdenes</TabsTrigger>\n          <TabsTrigger value=\"add-product\">Agregar Producto</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>√ìrdenes Recientes</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {recentOrders.slice(0, 3).map((order) => (\n                    <div key={order.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-sm\">{order.product}</p>\n                        <p className=\"text-xs text-gray-600\">{order.buyer}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-medium text-sm\">CLP ${(order.total / 100).toLocaleString()}</p>\n                        <Badge variant={order.status === 'delivered' ? 'default' : order.status === 'shipped' ? 'secondary' : 'outline'} className=\"text-xs\">\n                          {order.status === 'delivered' ? 'Entregado' : order.status === 'shipped' ? 'Enviado' : 'Pendiente'}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Productos Top</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {products.map((product) => (\n                    <div key={product.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-sm\">{product.title}</p>\n                        <p className=\"text-xs text-gray-600\">{product.sales} ventas</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-medium text-sm\">CLP ${(product.price / 100).toLocaleString()}</p>\n                        <p className=\"text-xs text-gray-500\">Stock: {product.stock}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"products\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle>Mis Productos</CardTitle>\n              <Button onClick={() => setActiveTab(\"add-product\")}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Agregar Producto\n              </Button>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {products.map((product) => (\n                  <div key={product.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium\">{product.title}</h3>\n                      <p className=\"text-sm text-gray-600\">CLP ${(product.price / 100).toLocaleString()}</p>\n                      <div className=\"flex items-center gap-4 mt-2\">\n                        <Badge variant={product.status === 'active' ? 'default' : 'destructive'}>\n                          {product.status === 'active' ? 'Activo' : 'Sin Stock'}\n                        </Badge>\n                        <span className=\"text-sm text-gray-500\">Stock: {product.stock}</span>\n                        <span className=\"text-sm text-gray-500\">Ventas: {product.sales}</span>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"orders\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Todas las √ìrdenes</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {recentOrders.map((order) => (\n                  <div key={order.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">{order.id}</p>\n                      <p className=\"text-sm text-gray-600\">{order.product}</p>\n                      <p className=\"text-sm text-gray-500\">Cliente: {order.buyer}</p>\n                      <p className=\"text-sm text-gray-500\">{order.date}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium\">CLP ${(order.total / 100).toLocaleString()}</p>\n                      <Badge variant={order.status === 'delivered' ? 'default' : order.status === 'shipped' ? 'secondary' : 'outline'}>\n                        {order.status === 'delivered' ? 'Entregado' : order.status === 'shipped' ? 'Enviado' : 'Pendiente'}\n                      </Badge>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      Ver\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"add-product\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Agregar Nuevo Producto</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"title\">T√≠tulo del Producto</Label>\n                    <Input id=\"title\" placeholder=\"Ej: iPhone 15 Pro Max\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"category\">Categor√≠a</Label>\n                    <Select>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Seleccionar categor√≠a\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"smartphones\">Smartphones</SelectItem>\n                        <SelectItem value=\"laptops\">Laptops</SelectItem>\n                        <SelectItem value=\"tablets\">Tablets</SelectItem>\n                        <SelectItem value=\"audio\">Audio</SelectItem>\n                        <SelectItem value=\"smartwatch\">Smartwatch</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Descripci√≥n</Label>\n                  <Textarea \n                    id=\"description\" \n                    placeholder=\"Describe tu producto en detalle...\"\n                    rows={4}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"price\">Precio (CLP)</Label>\n                    <Input id=\"price\" type=\"number\" placeholder=\"1299990\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"sku\">SKU</Label>\n                    <Input id=\"sku\" placeholder=\"IPH15PM-256-TB\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"stock\">Stock Inicial</Label>\n                    <Input id=\"stock\" type=\"number\" placeholder=\"10\" />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"images\">Im√°genes del Producto</Label>\n                  <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                    <Upload className=\"h-8 w-8 mx-auto text-gray-400 mb-2\" />\n                    <p className=\"text-sm text-gray-600\">Arrastra im√°genes aqu√≠ o haz clic para seleccionar</p>\n                    <p className=\"text-xs text-gray-500 mt-1\">PNG, JPG hasta 5MB cada una</p>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-4\">\n                  <Button type=\"submit\" className=\"flex-1\">\n                    Crear Producto\n                  </Button>\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setActiveTab(\"products\")}>\n                    Cancelar\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":14263},"AppleAura/public/images/products/create-images.js":{"content":"\n// Script para generar im√°genes SVG de productos Apple\nconst fs = require('fs');\nconst path = require('path');\n\nconst createSVG = (name, color = '#000000', bgColor = '#f5f5f7') => {\n  let svg = '';\n  \n  switch (name) {\n    case 'iphone-15-pro-max':\n      svg = `\n        <svg viewBox=\"0 0 200 300\" xmlns=\"http://www.w3.org/2000/svg\">\n          <rect width=\"200\" height=\"300\" fill=\"${bgColor}\" rx=\"20\"/>\n          <rect x=\"20\" y=\"30\" width=\"160\" height=\"240\" fill=\"${color}\" rx=\"25\"/>\n          <rect x=\"30\" y=\"40\" width=\"140\" height=\"220\" fill=\"#1a1a1a\" rx=\"15\"/>\n          <circle cx=\"100\" cy=\"60\" r=\"8\" fill=\"#333\"/>\n          <rect x=\"60\" y=\"45\" width=\"80\" height=\"30\" fill=\"#333\" rx=\"15\"/>\n          <circle cx=\"100\" cy=\"270\" r=\"15\" fill=\"#666\"/>\n        </svg>\n      `;\n      break;\n    case 'macbook-pro-14':\n      svg = `\n        <svg viewBox=\"0 0 300 200\" xmlns=\"http://www.w3.org/2000/svg\">\n          <rect width=\"300\" height=\"200\" fill=\"${bgColor}\"/>\n          <rect x=\"30\" y=\"30\" width=\"240\" height=\"140\" fill=\"${color}\" rx=\"8\"/>\n          <rect x=\"40\" y=\"40\" width=\"220\" height=\"120\" fill=\"#1a1a1a\" rx=\"4\"/>\n          <rect x=\"20\" y=\"170\" width=\"260\" height=\"20\" fill=\"${color}\" rx=\"10\"/>\n          <rect x=\"140\" y=\"175\" width=\"20\" height=\"10\" fill=\"#666\" rx=\"5\"/>\n        </svg>\n      `;\n      break;\n    case 'ipad-pro-129':\n      svg = `\n        <svg viewBox=\"0 0 250 320\" xmlns=\"http://www.w3.org/2000/svg\">\n          <rect width=\"250\" height=\"320\" fill=\"${bgColor}\" rx=\"15\"/>\n          <rect x=\"20\" y=\"20\" width=\"210\" height=\"280\" fill=\"${color}\" rx=\"12\"/>\n          <rect x=\"30\" y=\"30\" width=\"190\" height=\"260\" fill=\"#1a1a1a\" rx=\"8\"/>\n          <circle cx=\"125\" cy=\"310\" r=\"8\" fill=\"#666\"/>\n        </svg>\n      `;\n      break;\n    case 'airpods-pro':\n      svg = `\n        <svg viewBox=\"0 0 200 250\" xmlns=\"http://www.w3.org/2000/svg\">\n          <rect width=\"200\" height=\"250\" fill=\"${bgColor}\"/>\n          <rect x=\"50\" y=\"50\" width=\"100\" height=\"150\" fill=\"${color}\" rx=\"50\"/>\n          <circle cx=\"70\" cy=\"180\" r=\"20\" fill=\"${color}\"/>\n          <circle cx=\"130\" cy=\"180\" r=\"20\" fill=\"${color}\"/>\n          <rect x=\"65\" y=\"195\" width=\"10\" height=\"30\" fill=\"${color}\" rx=\"5\"/>\n          <rect x=\"125\" y=\"195\" width=\"10\" height=\"30\" fill=\"${color}\" rx=\"5\"/>\n        </svg>\n      `;\n      break;\n    case 'apple-watch-s9':\n      svg = `\n        <svg viewBox=\"0 0 180 220\" xmlns=\"http://www.w3.org/2000/svg\">\n          <rect width=\"180\" height=\"220\" fill=\"${bgColor}\"/>\n          <rect x=\"40\" y=\"60\" width=\"100\" height=\"120\" fill=\"${color}\" rx=\"25\"/>\n          <rect x=\"50\" y=\"70\" width=\"80\" height=\"100\" fill=\"#1a1a1a\" rx=\"15\"/>\n          <rect x=\"70\" y=\"40\" width=\"40\" height=\"20\" fill=\"${color}\" rx=\"10\"/>\n          <rect x=\"70\" y=\"180\" width=\"40\" height=\"20\" fill=\"${color}\" rx=\"10\"/>\n          <circle cx=\"90\" cy=\"120\" r=\"25\" fill=\"#333\"/>\n          <circle cx=\"90\" cy=\"120\" r=\"15\" fill=\"#666\"/>\n        </svg>\n      `;\n      break;\n    case 'imac-24':\n      svg = `\n        <svg viewBox=\"0 0 300 280\" xmlns=\"http://www.w3.org/2000/svg\">\n          <rect width=\"300\" height=\"280\" fill=\"${bgColor}\"/>\n          <rect x=\"30\" y=\"30\" width=\"240\" height=\"180\" fill=\"${color}\" rx=\"12\"/>\n          <rect x=\"40\" y=\"40\" width=\"220\" height=\"160\" fill=\"#1a1a1a\" rx=\"8\"/>\n          <polygon points=\"140,210 160,210 170,250 130,250\" fill=\"${color}\"/>\n          <rect x=\"80\" y=\"250\" width=\"140\" height=\"15\" fill=\"${color}\" rx=\"7\"/>\n        </svg>\n      `;\n      break;\n    default:\n      svg = `\n        <svg viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\">\n          <rect width=\"200\" height=\"200\" fill=\"${bgColor}\"/>\n          <rect x=\"50\" y=\"50\" width=\"100\" height=\"100\" fill=\"${color}\" rx=\"10\"/>\n        </svg>\n      `;\n  }\n  \n  return svg;\n};\n\n// Crear directorio si no existe\nconst dir = path.dirname(__filename);\nif (!fs.existsSync(dir)) {\n  fs.mkdirSync(dir, { recursive: true });\n}\n\n// Generar im√°genes\nconst products = [\n  { name: 'iphone-15-pro-max', color: '#4a4a4a' },\n  { name: 'macbook-pro-14', color: '#8e8e93' },\n  { name: 'ipad-pro-129', color: '#6c6c70' },\n  { name: 'airpods-pro', color: '#ffffff' },\n  { name: 'apple-watch-s9', color: '#1d1d1f' },\n  { name: 'imac-24', color: '#007aff' },\n];\n\nproducts.forEach(product => {\n  const svg = createSVG(product.name, product.color);\n  const filename = path.join(dir, `${product.name}.svg`);\n  fs.writeFileSync(filename, svg);\n  console.log(`Created: ${filename}`);\n});\n\nconsole.log('All product images created successfully!');\n","size_bytes":4511},"AppleAura/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"AppleAura/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"AppleAura/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"AppleAura/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"AppleAura/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"AppleAura/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"AppleAura/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"AppleAura/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"AppleAura/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"AppleAura/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"AppleAura/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"AppleAura/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"AppleAura/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"AppleAura/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"AppleAura/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"AppleAura/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"AppleAura/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"AppleAura/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"AppleAura/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"AppleAura/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"AppleAura/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"AppleAura/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"AppleAura/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"AppleAura/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"AppleAura/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"AppleAura/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"AppleAura/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"AppleAura/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"AppleAura/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"AppleAura/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"AppleAura/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"AppleAura/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"AppleAura/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"AppleAura/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"AppleAura/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"AppleAura/client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"AppleAura/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"AppleAura/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"AppleAura/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"AppleAura/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"AppleAura/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"AppleAura/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"AppleAura/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"AppleAura/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"AppleAura/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"AppleAura/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"AppleAura/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}